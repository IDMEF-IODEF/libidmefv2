



















/*****
*
* Copyright (C) 2001-2016 CS-SI. All Rights Reserved.
* Author: Yoann Vandoorselaere <yoann.v@prelude-ids.com>
* Author: Nicolas Delon <nicolas.delon@prelude-ids.com>
*
* This file is part of the Libidmefv2 library.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2, or (at your option)
* any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License along
* with this program; if not, write to the Free Software Foundation, Inc.,
* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*
*****/

/*
 * This file was automatically generated by our generator, version 1
 *
 * Do not make changes to this file unless you know what you are doing.
 * modify the template interface file instead.
 * IDMEFV2 version : Not released yet
 * Template file: generate-tree-wrap.h.mako
 *
 */

#ifndef _LIBIDMEFV2_IDMEFV2_TREE_WRAP_H
#define _LIBIDMEFV2_IDMEFV2_TREE_WRAP_H

#include <limits.h>
#include "idmefv2-class.h"
#include "idmefv2-value.h"
#include "libidmefv2-inttypes.h"
#include "libidmefv2-string.h"

#ifdef __cplusplus
  extern "C" {
#endif

#ifdef WIN32
# undef interface
#endif

#define IDMEFV2_LIST_APPEND  INT_MAX
#define IDMEFV2_LIST_PREPEND (INT_MAX - 1)

        
typedef enum {
        IDMEFV2_ADDRESS_TRANSLATION_PRE = 0,
        IDMEFV2_ADDRESS_TRANSLATION_POST = 1,
        IDMEFV2_ADDRESS_TRANSLATION_FALSE = 2,
} idmefv2_address_translation_t;
        
idmefv2_address_translation_t idmefv2_address_translation_to_numeric(const char *name);
const char *idmefv2_address_translation_to_string(idmefv2_address_translation_t val);

        
typedef enum {
        IDMEFV2_ADDRESS_CATEGORY_UNKNOWN = 0,
        IDMEFV2_ADDRESS_CATEGORY_ATM = 1,
        IDMEFV2_ADDRESS_CATEGORY_E_MAIL = 2,
        IDMEFV2_ADDRESS_CATEGORY_LOTUS_NOTES = 3,
        IDMEFV2_ADDRESS_CATEGORY_MAC = 4,
        IDMEFV2_ADDRESS_CATEGORY_SNA = 5,
        IDMEFV2_ADDRESS_CATEGORY_VM = 6,
        IDMEFV2_ADDRESS_CATEGORY_IPV4_ADDR = 7,
        IDMEFV2_ADDRESS_CATEGORY_IPV4_ADDR_HEX = 8,
        IDMEFV2_ADDRESS_CATEGORY_IPV4_NET = 9,
        IDMEFV2_ADDRESS_CATEGORY_IPV4_NET_MASK = 10,
        IDMEFV2_ADDRESS_CATEGORY_IPV6_ADDR = 11,
        IDMEFV2_ADDRESS_CATEGORY_IPV6_ADDR_HEX = 12,
        IDMEFV2_ADDRESS_CATEGORY_IPV6_NET = 13,
        IDMEFV2_ADDRESS_CATEGORY_IPV6_NET_MASK = 14,
} idmefv2_address_category_t;
        
idmefv2_address_category_t idmefv2_address_category_to_numeric(const char *name);
const char *idmefv2_address_category_to_string(idmefv2_address_category_t val);

        


/*
 * struct {
 *       IDMEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         libidmefv2_string_t *ident;
 *         idmefv2_address_translation_t translation;
 *         idmefv2_address_category_t category;
 *         libidmefv2_string_t *vlan_name;
 *         OPTIONAL_INT(uint32_t, vlan_num);
 *        REQUIRED(libidmefv2_string_t, *address);
 *         libidmefv2_string_t *netmask;
 * } TYPE_ID(idmefv2_address_t, 5);
 */

typedef struct idmefv2_address idmefv2_address_t;


int idmefv2_address_new(idmefv2_address_t **ret);
int idmefv2_address_copy(const idmefv2_address_t *src, idmefv2_address_t *dst);
int idmefv2_address_clone(idmefv2_address_t *src, idmefv2_address_t **dst);
int idmefv2_address_compare(const idmefv2_address_t *obj1, const idmefv2_address_t *obj2);


idmefv2_address_t *idmefv2_address_ref(idmefv2_address_t *address);

#ifndef SWIG

int _idmefv2_address_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_address_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_address_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_address_destroy(idmefv2_address_t *ptr);




libidmefv2_string_t *idmefv2_address_get_ident(idmefv2_address_t *ptr);

void idmefv2_address_set_ident(idmefv2_address_t *ptr, libidmefv2_string_t *ident);
int idmefv2_address_new_ident(idmefv2_address_t *ptr, libidmefv2_string_t **ret);



idmefv2_address_translation_t idmefv2_address_get_translation(idmefv2_address_t *ptr);

void idmefv2_address_set_translation(idmefv2_address_t *ptr, idmefv2_address_translation_t translation);
int idmefv2_address_new_translation(idmefv2_address_t *ptr, idmefv2_address_translation_t **ret);



idmefv2_address_category_t idmefv2_address_get_category(idmefv2_address_t *ptr);

void idmefv2_address_set_category(idmefv2_address_t *ptr, idmefv2_address_category_t category);
int idmefv2_address_new_category(idmefv2_address_t *ptr, idmefv2_address_category_t **ret);



libidmefv2_string_t *idmefv2_address_get_vlan_name(idmefv2_address_t *ptr);

void idmefv2_address_set_vlan_name(idmefv2_address_t *ptr, libidmefv2_string_t *vlan_name);
int idmefv2_address_new_vlan_name(idmefv2_address_t *ptr, libidmefv2_string_t **ret);



void idmefv2_address_unset_vlan_num(idmefv2_address_t *ptr);
uint32_t *idmefv2_address_get_vlan_num(idmefv2_address_t *ptr);

void idmefv2_address_set_vlan_num(idmefv2_address_t *ptr, uint32_t vlan_num);
int idmefv2_address_new_vlan_num(idmefv2_address_t *ptr, uint32_t **ret);



libidmefv2_string_t *idmefv2_address_get_address(idmefv2_address_t *ptr);

void idmefv2_address_set_address(idmefv2_address_t *ptr, libidmefv2_string_t *address);
int idmefv2_address_new_address(idmefv2_address_t *ptr, libidmefv2_string_t **ret);



libidmefv2_string_t *idmefv2_address_get_netmask(idmefv2_address_t *ptr);

void idmefv2_address_set_netmask(idmefv2_address_t *ptr, libidmefv2_string_t *netmask);
int idmefv2_address_new_netmask(idmefv2_address_t *ptr, libidmefv2_string_t **ret);



        
typedef enum {
        IDMEFV2_USER_ID_CATEGORY_CURRENT_USER = 0,
        IDMEFV2_USER_ID_CATEGORY_ORIGINAL_USER = 1,
        IDMEFV2_USER_ID_CATEGORY_TARGET_USER = 2,
        IDMEFV2_USER_ID_CATEGORY_CURRENT_GROUP = 3,
        IDMEFV2_USER_ID_CATEGORY_ORIGINAL_GROUP = 4,
        IDMEFV2_USER_ID_CATEGORY_TARGET_GROUP = 5,
        IDMEFV2_USER_ID_CATEGORY_USER_PRIVS = 6,
        IDMEFV2_USER_ID_CATEGORY_GROUP_PRIVS = 7,
        IDMEFV2_USER_ID_CATEGORY_OTHER_PRIVS = 8,
} idmefv2_user_id_category_t;
        
idmefv2_user_id_category_t idmefv2_user_id_category_to_numeric(const char *name);
const char *idmefv2_user_id_category_to_string(idmefv2_user_id_category_t val);

        


/*
 * struct {
 *       IDMEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         libidmefv2_string_t *ident;
 *         idmefv2_user_id_category_t category;
 *         libidmefv2_string_t *tty;
 *         libidmefv2_string_t *name;
 *         OPTIONAL_INT(uint32_t, number);
 * } TYPE_ID(idmefv2_user_id_t, 7);
 */

typedef struct idmefv2_user_id idmefv2_user_id_t;


int idmefv2_user_id_new(idmefv2_user_id_t **ret);
int idmefv2_user_id_copy(const idmefv2_user_id_t *src, idmefv2_user_id_t *dst);
int idmefv2_user_id_clone(idmefv2_user_id_t *src, idmefv2_user_id_t **dst);
int idmefv2_user_id_compare(const idmefv2_user_id_t *obj1, const idmefv2_user_id_t *obj2);


idmefv2_user_id_t *idmefv2_user_id_ref(idmefv2_user_id_t *user_id);

#ifndef SWIG

int _idmefv2_user_id_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_user_id_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_user_id_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_user_id_destroy(idmefv2_user_id_t *ptr);




libidmefv2_string_t *idmefv2_user_id_get_ident(idmefv2_user_id_t *ptr);

void idmefv2_user_id_set_ident(idmefv2_user_id_t *ptr, libidmefv2_string_t *ident);
int idmefv2_user_id_new_ident(idmefv2_user_id_t *ptr, libidmefv2_string_t **ret);



idmefv2_user_id_category_t idmefv2_user_id_get_category(idmefv2_user_id_t *ptr);

void idmefv2_user_id_set_category(idmefv2_user_id_t *ptr, idmefv2_user_id_category_t category);
int idmefv2_user_id_new_category(idmefv2_user_id_t *ptr, idmefv2_user_id_category_t **ret);



libidmefv2_string_t *idmefv2_user_id_get_tty(idmefv2_user_id_t *ptr);

void idmefv2_user_id_set_tty(idmefv2_user_id_t *ptr, libidmefv2_string_t *tty);
int idmefv2_user_id_new_tty(idmefv2_user_id_t *ptr, libidmefv2_string_t **ret);



libidmefv2_string_t *idmefv2_user_id_get_name(idmefv2_user_id_t *ptr);

void idmefv2_user_id_set_name(idmefv2_user_id_t *ptr, libidmefv2_string_t *name);
int idmefv2_user_id_new_name(idmefv2_user_id_t *ptr, libidmefv2_string_t **ret);



void idmefv2_user_id_unset_number(idmefv2_user_id_t *ptr);
uint32_t *idmefv2_user_id_get_number(idmefv2_user_id_t *ptr);

void idmefv2_user_id_set_number(idmefv2_user_id_t *ptr, uint32_t number);
int idmefv2_user_id_new_number(idmefv2_user_id_t *ptr, uint32_t **ret);



        
typedef enum {
        IDMEFV2_NODE_NAME_CATEGORY_UNKNOWN = 0,
        IDMEFV2_NODE_NAME_CATEGORY_AD = 1,
        IDMEFV2_NODE_NAME_CATEGORY_AFS = 2,
        IDMEFV2_NODE_NAME_CATEGORY_CODA = 3,
        IDMEFV2_NODE_NAME_CATEGORY_DFS = 4,
        IDMEFV2_NODE_NAME_CATEGORY_DNS = 5,
        IDMEFV2_NODE_NAME_CATEGORY_HOSTS = 6,
        IDMEFV2_NODE_NAME_CATEGORY_KERBEROS = 7,
        IDMEFV2_NODE_NAME_CATEGORY_NDS = 8,
        IDMEFV2_NODE_NAME_CATEGORY_NIS = 9,
        IDMEFV2_NODE_NAME_CATEGORY_NISPLUS = 10,
        IDMEFV2_NODE_NAME_CATEGORY_NT = 11,
        IDMEFV2_NODE_NAME_CATEGORY_WFW = 12,
        IDMEFV2_NODE_NAME_CATEGORY_LLMNR = 13,
        IDMEFV2_NODE_NAME_CATEGORY_MDNS = 14,
} idmefv2_node_name_category_t;
        
idmefv2_node_name_category_t idmefv2_node_name_category_to_numeric(const char *name);
const char *idmefv2_node_name_category_to_string(idmefv2_node_name_category_t val);

        


/*
 * struct {
 *       IDMEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         idmefv2_node_name_category_t category;
 *        REQUIRED(libidmefv2_string_t, *name);
 * } TYPE_ID(idmefv2_node_name_t, 9);
 */

typedef struct idmefv2_node_name idmefv2_node_name_t;


int idmefv2_node_name_new(idmefv2_node_name_t **ret);
int idmefv2_node_name_copy(const idmefv2_node_name_t *src, idmefv2_node_name_t *dst);
int idmefv2_node_name_clone(idmefv2_node_name_t *src, idmefv2_node_name_t **dst);
int idmefv2_node_name_compare(const idmefv2_node_name_t *obj1, const idmefv2_node_name_t *obj2);


idmefv2_node_name_t *idmefv2_node_name_ref(idmefv2_node_name_t *node_name);

#ifndef SWIG

int _idmefv2_node_name_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_node_name_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_node_name_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_node_name_destroy(idmefv2_node_name_t *ptr);




idmefv2_node_name_category_t idmefv2_node_name_get_category(idmefv2_node_name_t *ptr);

void idmefv2_node_name_set_category(idmefv2_node_name_t *ptr, idmefv2_node_name_category_t category);
int idmefv2_node_name_new_category(idmefv2_node_name_t *ptr, idmefv2_node_name_category_t **ret);



libidmefv2_string_t *idmefv2_node_name_get_name(idmefv2_node_name_t *ptr);

void idmefv2_node_name_set_name(idmefv2_node_name_t *ptr, libidmefv2_string_t *name);
int idmefv2_node_name_new_name(idmefv2_node_name_t *ptr, libidmefv2_string_t **ret);



        


/*
 * struct {
 *       IDMEFV2_OBJECT;
 *       REFCOUNT;
 *         libidmefv2_string_t *name;
 *         OPTIONAL_INT(float, latitude);
 *         OPTIONAL_INT(float, longitude);
 *         OPTIONAL_INT(float, altitude);
 *         libidmefv2_string_t *country;
 *         libidmefv2_string_t *city;
 *         libidmefv2_string_t *postcode;
 * } TYPE_ID(idmefv2_location_t, 10);
 */

typedef struct idmefv2_location idmefv2_location_t;


int idmefv2_location_new(idmefv2_location_t **ret);
int idmefv2_location_copy(const idmefv2_location_t *src, idmefv2_location_t *dst);
int idmefv2_location_clone(idmefv2_location_t *src, idmefv2_location_t **dst);
int idmefv2_location_compare(const idmefv2_location_t *obj1, const idmefv2_location_t *obj2);


idmefv2_location_t *idmefv2_location_ref(idmefv2_location_t *location);

#ifndef SWIG

int _idmefv2_location_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_location_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_location_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_location_destroy(idmefv2_location_t *ptr);




libidmefv2_string_t *idmefv2_location_get_name(idmefv2_location_t *ptr);

void idmefv2_location_set_name(idmefv2_location_t *ptr, libidmefv2_string_t *name);
int idmefv2_location_new_name(idmefv2_location_t *ptr, libidmefv2_string_t **ret);



void idmefv2_location_unset_latitude(idmefv2_location_t *ptr);
float *idmefv2_location_get_latitude(idmefv2_location_t *ptr);

void idmefv2_location_set_latitude(idmefv2_location_t *ptr, float latitude);
int idmefv2_location_new_latitude(idmefv2_location_t *ptr, float **ret);



void idmefv2_location_unset_longitude(idmefv2_location_t *ptr);
float *idmefv2_location_get_longitude(idmefv2_location_t *ptr);

void idmefv2_location_set_longitude(idmefv2_location_t *ptr, float longitude);
int idmefv2_location_new_longitude(idmefv2_location_t *ptr, float **ret);



void idmefv2_location_unset_altitude(idmefv2_location_t *ptr);
float *idmefv2_location_get_altitude(idmefv2_location_t *ptr);

void idmefv2_location_set_altitude(idmefv2_location_t *ptr, float altitude);
int idmefv2_location_new_altitude(idmefv2_location_t *ptr, float **ret);



libidmefv2_string_t *idmefv2_location_get_country(idmefv2_location_t *ptr);

void idmefv2_location_set_country(idmefv2_location_t *ptr, libidmefv2_string_t *country);
int idmefv2_location_new_country(idmefv2_location_t *ptr, libidmefv2_string_t **ret);



libidmefv2_string_t *idmefv2_location_get_city(idmefv2_location_t *ptr);

void idmefv2_location_set_city(idmefv2_location_t *ptr, libidmefv2_string_t *city);
int idmefv2_location_new_city(idmefv2_location_t *ptr, libidmefv2_string_t **ret);



libidmefv2_string_t *idmefv2_location_get_postcode(idmefv2_location_t *ptr);

void idmefv2_location_set_postcode(idmefv2_location_t *ptr, libidmefv2_string_t *postcode);
int idmefv2_location_new_postcode(idmefv2_location_t *ptr, libidmefv2_string_t **ret);



        
typedef enum {
        IDMEFV2_INTERFACE_CATEGORY_USER_SPECIFIC = 0,
        IDMEFV2_INTERFACE_CATEGORY_VENDOR_SPECIFIC = 1,
        IDMEFV2_INTERFACE_CATEGORY_MANAGEMENT = 2,
        IDMEFV2_INTERFACE_CATEGORY_NETWORK = 3,
        IDMEFV2_INTERFACE_CATEGORY_CAPTURE = 4,
} idmefv2_interface_category_t;
        
idmefv2_interface_category_t idmefv2_interface_category_to_numeric(const char *name);
const char *idmefv2_interface_category_to_string(idmefv2_interface_category_t val);

        


/*
 * struct {
 *       IDMEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         libidmefv2_string_t *name;
 *         idmefv2_interface_category_t category;
 *         libidmefv2_string_t *meaning;
 *        LISTED_OBJECT(address_list, idmefv2_address_t);
 * } TYPE_ID(idmefv2_interface_t, 12);
 */

typedef struct idmefv2_interface idmefv2_interface_t;


int idmefv2_interface_new(idmefv2_interface_t **ret);
int idmefv2_interface_copy(const idmefv2_interface_t *src, idmefv2_interface_t *dst);
int idmefv2_interface_clone(idmefv2_interface_t *src, idmefv2_interface_t **dst);
int idmefv2_interface_compare(const idmefv2_interface_t *obj1, const idmefv2_interface_t *obj2);


idmefv2_interface_t *idmefv2_interface_ref(idmefv2_interface_t *interface);

#ifndef SWIG

int _idmefv2_interface_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_interface_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_interface_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_interface_destroy(idmefv2_interface_t *ptr);




libidmefv2_string_t *idmefv2_interface_get_name(idmefv2_interface_t *ptr);

void idmefv2_interface_set_name(idmefv2_interface_t *ptr, libidmefv2_string_t *name);
int idmefv2_interface_new_name(idmefv2_interface_t *ptr, libidmefv2_string_t **ret);



idmefv2_interface_category_t idmefv2_interface_get_category(idmefv2_interface_t *ptr);

void idmefv2_interface_set_category(idmefv2_interface_t *ptr, idmefv2_interface_category_t category);
int idmefv2_interface_new_category(idmefv2_interface_t *ptr, idmefv2_interface_category_t **ret);



libidmefv2_string_t *idmefv2_interface_get_meaning(idmefv2_interface_t *ptr);

void idmefv2_interface_set_meaning(idmefv2_interface_t *ptr, libidmefv2_string_t *meaning);
int idmefv2_interface_new_meaning(idmefv2_interface_t *ptr, libidmefv2_string_t **ret);


idmefv2_address_t *idmefv2_interface_get_next_address(idmefv2_interface_t *interface, idmefv2_address_t *address_cur);
void idmefv2_interface_set_address(idmefv2_interface_t *ptr, idmefv2_address_t *object, int pos);
int idmefv2_interface_new_address(idmefv2_interface_t *ptr, idmefv2_address_t **ret, int pos);



        
typedef enum {
        IDMEFV2_FILE_ACCESS_PERMISSION_NO_ACCESS = 0,
        IDMEFV2_FILE_ACCESS_PERMISSION_READ = 1,
        IDMEFV2_FILE_ACCESS_PERMISSION_WRITE = 2,
        IDMEFV2_FILE_ACCESS_PERMISSION_EXECUTE = 3,
        IDMEFV2_FILE_ACCESS_PERMISSION_SEARCH = 4,
        IDMEFV2_FILE_ACCESS_PERMISSION_DELETE = 5,
        IDMEFV2_FILE_ACCESS_PERMISSION_EXECUTE_AS = 6,
        IDMEFV2_FILE_ACCESS_PERMISSION_CHANGE_PERMISSIONS = 7,
        IDMEFV2_FILE_ACCESS_PERMISSION_CHANGE_OWNERSHIP = 8,
        IDMEFV2_FILE_ACCESS_PERMISSION_READ_PERMISSIONS = 9,
} idmefv2_file_access_permission_t;
        
idmefv2_file_access_permission_t idmefv2_file_access_permission_to_numeric(const char *name);
const char *idmefv2_file_access_permission_to_string(idmefv2_file_access_permission_t val);

        


/*
 * struct {
 *       IDMEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *        REQUIRED(idmefv2_user_id_t, *user_id);
 *         idmefv2_file_access_permission_t permission;
 * } TYPE_ID(idmefv2_file_access_t, 14);
 */

typedef struct idmefv2_file_access idmefv2_file_access_t;


int idmefv2_file_access_new(idmefv2_file_access_t **ret);
int idmefv2_file_access_copy(const idmefv2_file_access_t *src, idmefv2_file_access_t *dst);
int idmefv2_file_access_clone(idmefv2_file_access_t *src, idmefv2_file_access_t **dst);
int idmefv2_file_access_compare(const idmefv2_file_access_t *obj1, const idmefv2_file_access_t *obj2);


idmefv2_file_access_t *idmefv2_file_access_ref(idmefv2_file_access_t *file_access);

#ifndef SWIG

int _idmefv2_file_access_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_file_access_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_file_access_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_file_access_destroy(idmefv2_file_access_t *ptr);




idmefv2_user_id_t *idmefv2_file_access_get_user_id(idmefv2_file_access_t *ptr);

void idmefv2_file_access_set_user_id(idmefv2_file_access_t *ptr, idmefv2_user_id_t *user_id);
int idmefv2_file_access_new_user_id(idmefv2_file_access_t *ptr, idmefv2_user_id_t **ret);



idmefv2_file_access_permission_t idmefv2_file_access_get_permission(idmefv2_file_access_t *ptr);

void idmefv2_file_access_set_permission(idmefv2_file_access_t *ptr, idmefv2_file_access_permission_t permission);
int idmefv2_file_access_new_permission(idmefv2_file_access_t *ptr, idmefv2_file_access_permission_t **ret);



        


/*
 * struct {
 *       IDMEFV2_OBJECT;
 *       REFCOUNT;
 *         OPTIONAL_INT(uint32_t, number);
 *         OPTIONAL_INT(uint32_t, major_device);
 *         OPTIONAL_INT(uint32_t, minor_device);
 *         OPTIONAL_INT(uint32_t, c_major_device);
 *         OPTIONAL_INT(uint32_t, c_minor_device);
 *         idmefv2_time_t *change_time;
 * } TYPE_ID(idmefv2_inode_t, 15);
 */

typedef struct idmefv2_inode idmefv2_inode_t;


int idmefv2_inode_new(idmefv2_inode_t **ret);
int idmefv2_inode_copy(const idmefv2_inode_t *src, idmefv2_inode_t *dst);
int idmefv2_inode_clone(idmefv2_inode_t *src, idmefv2_inode_t **dst);
int idmefv2_inode_compare(const idmefv2_inode_t *obj1, const idmefv2_inode_t *obj2);


idmefv2_inode_t *idmefv2_inode_ref(idmefv2_inode_t *inode);

#ifndef SWIG

int _idmefv2_inode_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_inode_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_inode_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_inode_destroy(idmefv2_inode_t *ptr);




void idmefv2_inode_unset_number(idmefv2_inode_t *ptr);
uint32_t *idmefv2_inode_get_number(idmefv2_inode_t *ptr);

void idmefv2_inode_set_number(idmefv2_inode_t *ptr, uint32_t number);
int idmefv2_inode_new_number(idmefv2_inode_t *ptr, uint32_t **ret);



void idmefv2_inode_unset_major_device(idmefv2_inode_t *ptr);
uint32_t *idmefv2_inode_get_major_device(idmefv2_inode_t *ptr);

void idmefv2_inode_set_major_device(idmefv2_inode_t *ptr, uint32_t major_device);
int idmefv2_inode_new_major_device(idmefv2_inode_t *ptr, uint32_t **ret);



void idmefv2_inode_unset_minor_device(idmefv2_inode_t *ptr);
uint32_t *idmefv2_inode_get_minor_device(idmefv2_inode_t *ptr);

void idmefv2_inode_set_minor_device(idmefv2_inode_t *ptr, uint32_t minor_device);
int idmefv2_inode_new_minor_device(idmefv2_inode_t *ptr, uint32_t **ret);



void idmefv2_inode_unset_c_major_device(idmefv2_inode_t *ptr);
uint32_t *idmefv2_inode_get_c_major_device(idmefv2_inode_t *ptr);

void idmefv2_inode_set_c_major_device(idmefv2_inode_t *ptr, uint32_t c_major_device);
int idmefv2_inode_new_c_major_device(idmefv2_inode_t *ptr, uint32_t **ret);



void idmefv2_inode_unset_c_minor_device(idmefv2_inode_t *ptr);
uint32_t *idmefv2_inode_get_c_minor_device(idmefv2_inode_t *ptr);

void idmefv2_inode_set_c_minor_device(idmefv2_inode_t *ptr, uint32_t c_minor_device);
int idmefv2_inode_new_c_minor_device(idmefv2_inode_t *ptr, uint32_t **ret);



idmefv2_time_t *idmefv2_inode_get_change_time(idmefv2_inode_t *ptr);

void idmefv2_inode_set_change_time(idmefv2_inode_t *ptr, idmefv2_time_t *change_time);
int idmefv2_inode_new_change_time(idmefv2_inode_t *ptr, idmefv2_time_t **ret);



        
typedef enum {
        IDMEFV2_CHECKSUM_ALGORITHM_MD4 = 0,
        IDMEFV2_CHECKSUM_ALGORITHM_MD5 = 1,
        IDMEFV2_CHECKSUM_ALGORITHM_SHA1 = 2,
        IDMEFV2_CHECKSUM_ALGORITHM_SHA2_256 = 3,
        IDMEFV2_CHECKSUM_ALGORITHM_SHA2_384 = 4,
        IDMEFV2_CHECKSUM_ALGORITHM_SHA2_512 = 5,
        IDMEFV2_CHECKSUM_ALGORITHM_CRC_32 = 6,
        IDMEFV2_CHECKSUM_ALGORITHM_HAVAL = 7,
        IDMEFV2_CHECKSUM_ALGORITHM_TIGER = 8,
        IDMEFV2_CHECKSUM_ALGORITHM_GOST = 9,
        IDMEFV2_CHECKSUM_ALGORITHM_SHA3 = 10,
} idmefv2_checksum_algorithm_t;
        
idmefv2_checksum_algorithm_t idmefv2_checksum_algorithm_to_numeric(const char *name);
const char *idmefv2_checksum_algorithm_to_string(idmefv2_checksum_algorithm_t val);

        


/*
 * struct {
 *       IDMEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *        REQUIRED(libidmefv2_string_t, *value);
 *         libidmefv2_string_t *key;
 *         idmefv2_checksum_algorithm_t algorithm;
 * } TYPE_ID(idmefv2_checksum_t, 17);
 */

typedef struct idmefv2_checksum idmefv2_checksum_t;


int idmefv2_checksum_new(idmefv2_checksum_t **ret);
int idmefv2_checksum_copy(const idmefv2_checksum_t *src, idmefv2_checksum_t *dst);
int idmefv2_checksum_clone(idmefv2_checksum_t *src, idmefv2_checksum_t **dst);
int idmefv2_checksum_compare(const idmefv2_checksum_t *obj1, const idmefv2_checksum_t *obj2);


idmefv2_checksum_t *idmefv2_checksum_ref(idmefv2_checksum_t *checksum);

#ifndef SWIG

int _idmefv2_checksum_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_checksum_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_checksum_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_checksum_destroy(idmefv2_checksum_t *ptr);




libidmefv2_string_t *idmefv2_checksum_get_value(idmefv2_checksum_t *ptr);

void idmefv2_checksum_set_value(idmefv2_checksum_t *ptr, libidmefv2_string_t *value);
int idmefv2_checksum_new_value(idmefv2_checksum_t *ptr, libidmefv2_string_t **ret);



libidmefv2_string_t *idmefv2_checksum_get_key(idmefv2_checksum_t *ptr);

void idmefv2_checksum_set_key(idmefv2_checksum_t *ptr, libidmefv2_string_t *key);
int idmefv2_checksum_new_key(idmefv2_checksum_t *ptr, libidmefv2_string_t **ret);



idmefv2_checksum_algorithm_t idmefv2_checksum_get_algorithm(idmefv2_checksum_t *ptr);

void idmefv2_checksum_set_algorithm(idmefv2_checksum_t *ptr, idmefv2_checksum_algorithm_t algorithm);
int idmefv2_checksum_new_algorithm(idmefv2_checksum_t *ptr, idmefv2_checksum_algorithm_t **ret);



        
typedef struct idmefv2_linkage idmefv2_linkage_t;

        
typedef struct idmefv2_container idmefv2_container_t;

        
typedef enum {
        IDMEFV2_STREAM_OFFSETUNIT_LINE = 0,
        IDMEFV2_STREAM_OFFSETUNIT_BINARY = 1,
} idmefv2_stream_offsetunit_t;
        
idmefv2_stream_offsetunit_t idmefv2_stream_offsetunit_to_numeric(const char *name);
const char *idmefv2_stream_offsetunit_to_string(idmefv2_stream_offsetunit_t val);

        


/*
 * struct {
 *       IDMEFV2_OBJECT;
 *       REFCOUNT;
 *         idmefv2_stream_offsetunit_t offsetunit;
 *         OPTIONAL_INT(uint32_t, offset);
 * } TYPE_ID(idmefv2_stream_t, 19);
 */

typedef struct idmefv2_stream idmefv2_stream_t;


int idmefv2_stream_new(idmefv2_stream_t **ret);
int idmefv2_stream_copy(const idmefv2_stream_t *src, idmefv2_stream_t *dst);
int idmefv2_stream_clone(idmefv2_stream_t *src, idmefv2_stream_t **dst);
int idmefv2_stream_compare(const idmefv2_stream_t *obj1, const idmefv2_stream_t *obj2);


idmefv2_stream_t *idmefv2_stream_ref(idmefv2_stream_t *stream);

#ifndef SWIG

int _idmefv2_stream_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_stream_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_stream_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_stream_destroy(idmefv2_stream_t *ptr);




idmefv2_stream_offsetunit_t idmefv2_stream_get_offsetunit(idmefv2_stream_t *ptr);

void idmefv2_stream_set_offsetunit(idmefv2_stream_t *ptr, idmefv2_stream_offsetunit_t offsetunit);
int idmefv2_stream_new_offsetunit(idmefv2_stream_t *ptr, idmefv2_stream_offsetunit_t **ret);



void idmefv2_stream_unset_offset(idmefv2_stream_t *ptr);
uint32_t *idmefv2_stream_get_offset(idmefv2_stream_t *ptr);

void idmefv2_stream_set_offset(idmefv2_stream_t *ptr, uint32_t offset);
int idmefv2_stream_new_offset(idmefv2_stream_t *ptr, uint32_t **ret);



        
typedef enum {
        IDMEFV2_FILE_CATEGORY_CURRENT = 0,
        IDMEFV2_FILE_CATEGORY_ORIGINAL = 1,
} idmefv2_file_category_t;
        
idmefv2_file_category_t idmefv2_file_category_to_numeric(const char *name);
const char *idmefv2_file_category_to_string(idmefv2_file_category_t val);

        


/*
 * struct {
 *       IDMEFV2_OBJECT;
 *       REFCOUNT;
 *         libidmefv2_string_t *ident;
 *        REQUIRED(libidmefv2_string_t, *name);
 *        REQUIRED(libidmefv2_string_t, *path);
 *         idmefv2_time_t *create_time;
 *         idmefv2_time_t *modify_time;
 *         idmefv2_time_t *access_time;
 *         OPTIONAL_INT(uint64_t, data_size);
 *         OPTIONAL_INT(uint64_t, disk_size);
 *        LISTED_OBJECT(file_access_list, idmefv2_file_access_t);
 *        LISTED_OBJECT(linkage_list, idmefv2_linkage_t);
 *         idmefv2_inode_t *inode;
 *        LISTED_OBJECT(checksum_list, idmefv2_checksum_t);
 *         idmefv2_file_category_t category;
 *         libidmefv2_string_t *file_type;
 *         idmefv2_container_t *container;
 *         idmefv2_stream_t *stream;
 * } TYPE_ID(idmefv2_file_t, 21);
 */

typedef struct idmefv2_file idmefv2_file_t;


int idmefv2_file_new(idmefv2_file_t **ret);
int idmefv2_file_copy(const idmefv2_file_t *src, idmefv2_file_t *dst);
int idmefv2_file_clone(idmefv2_file_t *src, idmefv2_file_t **dst);
int idmefv2_file_compare(const idmefv2_file_t *obj1, const idmefv2_file_t *obj2);


idmefv2_file_t *idmefv2_file_ref(idmefv2_file_t *file);

#ifndef SWIG

int _idmefv2_file_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_file_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_file_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_file_destroy(idmefv2_file_t *ptr);




libidmefv2_string_t *idmefv2_file_get_ident(idmefv2_file_t *ptr);

void idmefv2_file_set_ident(idmefv2_file_t *ptr, libidmefv2_string_t *ident);
int idmefv2_file_new_ident(idmefv2_file_t *ptr, libidmefv2_string_t **ret);



libidmefv2_string_t *idmefv2_file_get_name(idmefv2_file_t *ptr);

void idmefv2_file_set_name(idmefv2_file_t *ptr, libidmefv2_string_t *name);
int idmefv2_file_new_name(idmefv2_file_t *ptr, libidmefv2_string_t **ret);



libidmefv2_string_t *idmefv2_file_get_path(idmefv2_file_t *ptr);

void idmefv2_file_set_path(idmefv2_file_t *ptr, libidmefv2_string_t *path);
int idmefv2_file_new_path(idmefv2_file_t *ptr, libidmefv2_string_t **ret);



idmefv2_time_t *idmefv2_file_get_create_time(idmefv2_file_t *ptr);

void idmefv2_file_set_create_time(idmefv2_file_t *ptr, idmefv2_time_t *create_time);
int idmefv2_file_new_create_time(idmefv2_file_t *ptr, idmefv2_time_t **ret);



idmefv2_time_t *idmefv2_file_get_modify_time(idmefv2_file_t *ptr);

void idmefv2_file_set_modify_time(idmefv2_file_t *ptr, idmefv2_time_t *modify_time);
int idmefv2_file_new_modify_time(idmefv2_file_t *ptr, idmefv2_time_t **ret);



idmefv2_time_t *idmefv2_file_get_access_time(idmefv2_file_t *ptr);

void idmefv2_file_set_access_time(idmefv2_file_t *ptr, idmefv2_time_t *access_time);
int idmefv2_file_new_access_time(idmefv2_file_t *ptr, idmefv2_time_t **ret);



void idmefv2_file_unset_data_size(idmefv2_file_t *ptr);
uint64_t *idmefv2_file_get_data_size(idmefv2_file_t *ptr);

void idmefv2_file_set_data_size(idmefv2_file_t *ptr, uint64_t data_size);
int idmefv2_file_new_data_size(idmefv2_file_t *ptr, uint64_t **ret);



void idmefv2_file_unset_disk_size(idmefv2_file_t *ptr);
uint64_t *idmefv2_file_get_disk_size(idmefv2_file_t *ptr);

void idmefv2_file_set_disk_size(idmefv2_file_t *ptr, uint64_t disk_size);
int idmefv2_file_new_disk_size(idmefv2_file_t *ptr, uint64_t **ret);


idmefv2_file_access_t *idmefv2_file_get_next_file_access(idmefv2_file_t *file, idmefv2_file_access_t *file_access_cur);
void idmefv2_file_set_file_access(idmefv2_file_t *ptr, idmefv2_file_access_t *object, int pos);
int idmefv2_file_new_file_access(idmefv2_file_t *ptr, idmefv2_file_access_t **ret, int pos);


idmefv2_linkage_t *idmefv2_file_get_next_linkage(idmefv2_file_t *file, idmefv2_linkage_t *linkage_cur);
void idmefv2_file_set_linkage(idmefv2_file_t *ptr, idmefv2_linkage_t *object, int pos);
int idmefv2_file_new_linkage(idmefv2_file_t *ptr, idmefv2_linkage_t **ret, int pos);



idmefv2_inode_t *idmefv2_file_get_inode(idmefv2_file_t *ptr);

void idmefv2_file_set_inode(idmefv2_file_t *ptr, idmefv2_inode_t *inode);
int idmefv2_file_new_inode(idmefv2_file_t *ptr, idmefv2_inode_t **ret);


idmefv2_checksum_t *idmefv2_file_get_next_checksum(idmefv2_file_t *file, idmefv2_checksum_t *checksum_cur);
void idmefv2_file_set_checksum(idmefv2_file_t *ptr, idmefv2_checksum_t *object, int pos);
int idmefv2_file_new_checksum(idmefv2_file_t *ptr, idmefv2_checksum_t **ret, int pos);



idmefv2_file_category_t idmefv2_file_get_category(idmefv2_file_t *ptr);

void idmefv2_file_set_category(idmefv2_file_t *ptr, idmefv2_file_category_t category);
int idmefv2_file_new_category(idmefv2_file_t *ptr, idmefv2_file_category_t **ret);



libidmefv2_string_t *idmefv2_file_get_file_type(idmefv2_file_t *ptr);

void idmefv2_file_set_file_type(idmefv2_file_t *ptr, libidmefv2_string_t *file_type);
int idmefv2_file_new_file_type(idmefv2_file_t *ptr, libidmefv2_string_t **ret);



idmefv2_container_t *idmefv2_file_get_container(idmefv2_file_t *ptr);

void idmefv2_file_set_container(idmefv2_file_t *ptr, idmefv2_container_t *container);
int idmefv2_file_new_container(idmefv2_file_t *ptr, idmefv2_container_t **ret);



idmefv2_stream_t *idmefv2_file_get_stream(idmefv2_file_t *ptr);

void idmefv2_file_set_stream(idmefv2_file_t *ptr, idmefv2_stream_t *stream);
int idmefv2_file_new_stream(idmefv2_file_t *ptr, idmefv2_stream_t **ret);



        
typedef enum {
        IDMEFV2_LINKAGE_CATEGORY_HARD_LINK = 0,
        IDMEFV2_LINKAGE_CATEGORY_MOUNT_POINT = 1,
        IDMEFV2_LINKAGE_CATEGORY_REPARSE_POINT = 2,
        IDMEFV2_LINKAGE_CATEGORY_SHORTCUT = 3,
        IDMEFV2_LINKAGE_CATEGORY_STREAM = 4,
        IDMEFV2_LINKAGE_CATEGORY_SYMBOLIC_LINK = 5,
} idmefv2_linkage_category_t;
        
idmefv2_linkage_category_t idmefv2_linkage_category_to_numeric(const char *name);
const char *idmefv2_linkage_category_to_string(idmefv2_linkage_category_t val);

        


/*
 * struct {
 *       IDMEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         idmefv2_linkage_category_t category;
 *        REQUIRED(libidmefv2_string_t, *name);
 *        REQUIRED(libidmefv2_string_t, *path);
 *        REQUIRED(idmefv2_file_t, *file);
 * } TYPE_ID(idmefv2_linkage_t, 23);
 */



int idmefv2_linkage_new(idmefv2_linkage_t **ret);
int idmefv2_linkage_copy(const idmefv2_linkage_t *src, idmefv2_linkage_t *dst);
int idmefv2_linkage_clone(idmefv2_linkage_t *src, idmefv2_linkage_t **dst);
int idmefv2_linkage_compare(const idmefv2_linkage_t *obj1, const idmefv2_linkage_t *obj2);


idmefv2_linkage_t *idmefv2_linkage_ref(idmefv2_linkage_t *linkage);

#ifndef SWIG

int _idmefv2_linkage_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_linkage_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_linkage_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_linkage_destroy(idmefv2_linkage_t *ptr);




idmefv2_linkage_category_t idmefv2_linkage_get_category(idmefv2_linkage_t *ptr);

void idmefv2_linkage_set_category(idmefv2_linkage_t *ptr, idmefv2_linkage_category_t category);
int idmefv2_linkage_new_category(idmefv2_linkage_t *ptr, idmefv2_linkage_category_t **ret);



libidmefv2_string_t *idmefv2_linkage_get_name(idmefv2_linkage_t *ptr);

void idmefv2_linkage_set_name(idmefv2_linkage_t *ptr, libidmefv2_string_t *name);
int idmefv2_linkage_new_name(idmefv2_linkage_t *ptr, libidmefv2_string_t **ret);



libidmefv2_string_t *idmefv2_linkage_get_path(idmefv2_linkage_t *ptr);

void idmefv2_linkage_set_path(idmefv2_linkage_t *ptr, libidmefv2_string_t *path);
int idmefv2_linkage_new_path(idmefv2_linkage_t *ptr, libidmefv2_string_t **ret);



idmefv2_file_t *idmefv2_linkage_get_file(idmefv2_linkage_t *ptr);

void idmefv2_linkage_set_file(idmefv2_linkage_t *ptr, idmefv2_file_t *file);
int idmefv2_linkage_new_file(idmefv2_linkage_t *ptr, idmefv2_file_t **ret);



        


/*
 * struct {
 *       IDMEFV2_OBJECT;
 *       REFCOUNT;
 *        REQUIRED(libidmefv2_string_t, *name);
 *        REQUIRED(libidmefv2_string_t, *path);
 *        REQUIRED(idmefv2_file_t, *file);
 * } TYPE_ID(idmefv2_container_t, 24);
 */



int idmefv2_container_new(idmefv2_container_t **ret);
int idmefv2_container_copy(const idmefv2_container_t *src, idmefv2_container_t *dst);
int idmefv2_container_clone(idmefv2_container_t *src, idmefv2_container_t **dst);
int idmefv2_container_compare(const idmefv2_container_t *obj1, const idmefv2_container_t *obj2);


idmefv2_container_t *idmefv2_container_ref(idmefv2_container_t *container);

#ifndef SWIG

int _idmefv2_container_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_container_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_container_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_container_destroy(idmefv2_container_t *ptr);




libidmefv2_string_t *idmefv2_container_get_name(idmefv2_container_t *ptr);

void idmefv2_container_set_name(idmefv2_container_t *ptr, libidmefv2_string_t *name);
int idmefv2_container_new_name(idmefv2_container_t *ptr, libidmefv2_string_t **ret);



libidmefv2_string_t *idmefv2_container_get_path(idmefv2_container_t *ptr);

void idmefv2_container_set_path(idmefv2_container_t *ptr, libidmefv2_string_t *path);
int idmefv2_container_new_path(idmefv2_container_t *ptr, libidmefv2_string_t **ret);



idmefv2_file_t *idmefv2_container_get_file(idmefv2_container_t *ptr);

void idmefv2_container_set_file(idmefv2_container_t *ptr, idmefv2_file_t *file);
int idmefv2_container_new_file(idmefv2_container_t *ptr, idmefv2_file_t **ret);



        


/*
 * struct {
 *       IDMEFV2_OBJECT;
 *       REFCOUNT;
 *         libidmefv2_string_t *ident;
 *        REQUIRED(libidmefv2_string_t, *name);
 *         OPTIONAL_INT(uint32_t, pid);
 *         libidmefv2_string_t *path;
 *        LISTED_OBJECT(arg_list, libidmefv2_string_t);
 *        LISTED_OBJECT(env_list, libidmefv2_string_t);
 *         OPTIONAL_INT(uint32_t, tid);
 * } TYPE_ID(idmefv2_process_t, 25);
 */

typedef struct idmefv2_process idmefv2_process_t;


int idmefv2_process_new(idmefv2_process_t **ret);
int idmefv2_process_copy(const idmefv2_process_t *src, idmefv2_process_t *dst);
int idmefv2_process_clone(idmefv2_process_t *src, idmefv2_process_t **dst);
int idmefv2_process_compare(const idmefv2_process_t *obj1, const idmefv2_process_t *obj2);


idmefv2_process_t *idmefv2_process_ref(idmefv2_process_t *process);

#ifndef SWIG

int _idmefv2_process_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_process_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_process_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_process_destroy(idmefv2_process_t *ptr);




libidmefv2_string_t *idmefv2_process_get_ident(idmefv2_process_t *ptr);

void idmefv2_process_set_ident(idmefv2_process_t *ptr, libidmefv2_string_t *ident);
int idmefv2_process_new_ident(idmefv2_process_t *ptr, libidmefv2_string_t **ret);



libidmefv2_string_t *idmefv2_process_get_name(idmefv2_process_t *ptr);

void idmefv2_process_set_name(idmefv2_process_t *ptr, libidmefv2_string_t *name);
int idmefv2_process_new_name(idmefv2_process_t *ptr, libidmefv2_string_t **ret);



void idmefv2_process_unset_pid(idmefv2_process_t *ptr);
uint32_t *idmefv2_process_get_pid(idmefv2_process_t *ptr);

void idmefv2_process_set_pid(idmefv2_process_t *ptr, uint32_t pid);
int idmefv2_process_new_pid(idmefv2_process_t *ptr, uint32_t **ret);



libidmefv2_string_t *idmefv2_process_get_path(idmefv2_process_t *ptr);

void idmefv2_process_set_path(idmefv2_process_t *ptr, libidmefv2_string_t *path);
int idmefv2_process_new_path(idmefv2_process_t *ptr, libidmefv2_string_t **ret);


libidmefv2_string_t *idmefv2_process_get_next_arg(idmefv2_process_t *process, libidmefv2_string_t *libidmefv2_string_cur);
void idmefv2_process_set_arg(idmefv2_process_t *ptr, libidmefv2_string_t *object, int pos);
int idmefv2_process_new_arg(idmefv2_process_t *ptr, libidmefv2_string_t **ret, int pos);


libidmefv2_string_t *idmefv2_process_get_next_env(idmefv2_process_t *process, libidmefv2_string_t *libidmefv2_string_cur);
void idmefv2_process_set_env(idmefv2_process_t *ptr, libidmefv2_string_t *object, int pos);
int idmefv2_process_new_env(idmefv2_process_t *ptr, libidmefv2_string_t **ret, int pos);



void idmefv2_process_unset_tid(idmefv2_process_t *ptr);
uint32_t *idmefv2_process_get_tid(idmefv2_process_t *ptr);

void idmefv2_process_set_tid(idmefv2_process_t *ptr, uint32_t tid);
int idmefv2_process_new_tid(idmefv2_process_t *ptr, uint32_t **ret);



        


/*
 * struct {
 *       IDMEFV2_OBJECT;
 *       REFCOUNT;
 *         libidmefv2_string_t *ident;
 *         OPTIONAL_INT(uint32_t, iana_protocol_number);
 *         libidmefv2_string_t *iana_protocol_name;
 *         libidmefv2_string_t *name;
 *         OPTIONAL_INT(uint32_t, port);
 *         libidmefv2_string_t *portlist;
 *         libidmefv2_string_t *protocol;
 * } TYPE_ID(idmefv2_service_t, 26);
 */

typedef struct idmefv2_service idmefv2_service_t;


int idmefv2_service_new(idmefv2_service_t **ret);
int idmefv2_service_copy(const idmefv2_service_t *src, idmefv2_service_t *dst);
int idmefv2_service_clone(idmefv2_service_t *src, idmefv2_service_t **dst);
int idmefv2_service_compare(const idmefv2_service_t *obj1, const idmefv2_service_t *obj2);


idmefv2_service_t *idmefv2_service_ref(idmefv2_service_t *service);

#ifndef SWIG

int _idmefv2_service_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_service_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_service_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_service_destroy(idmefv2_service_t *ptr);




libidmefv2_string_t *idmefv2_service_get_ident(idmefv2_service_t *ptr);

void idmefv2_service_set_ident(idmefv2_service_t *ptr, libidmefv2_string_t *ident);
int idmefv2_service_new_ident(idmefv2_service_t *ptr, libidmefv2_string_t **ret);



void idmefv2_service_unset_iana_protocol_number(idmefv2_service_t *ptr);
uint32_t *idmefv2_service_get_iana_protocol_number(idmefv2_service_t *ptr);

void idmefv2_service_set_iana_protocol_number(idmefv2_service_t *ptr, uint32_t iana_protocol_number);
int idmefv2_service_new_iana_protocol_number(idmefv2_service_t *ptr, uint32_t **ret);



libidmefv2_string_t *idmefv2_service_get_iana_protocol_name(idmefv2_service_t *ptr);

void idmefv2_service_set_iana_protocol_name(idmefv2_service_t *ptr, libidmefv2_string_t *iana_protocol_name);
int idmefv2_service_new_iana_protocol_name(idmefv2_service_t *ptr, libidmefv2_string_t **ret);



libidmefv2_string_t *idmefv2_service_get_name(idmefv2_service_t *ptr);

void idmefv2_service_set_name(idmefv2_service_t *ptr, libidmefv2_string_t *name);
int idmefv2_service_new_name(idmefv2_service_t *ptr, libidmefv2_string_t **ret);



void idmefv2_service_unset_port(idmefv2_service_t *ptr);
uint32_t *idmefv2_service_get_port(idmefv2_service_t *ptr);

void idmefv2_service_set_port(idmefv2_service_t *ptr, uint32_t port);
int idmefv2_service_new_port(idmefv2_service_t *ptr, uint32_t **ret);



libidmefv2_string_t *idmefv2_service_get_portlist(idmefv2_service_t *ptr);

void idmefv2_service_set_portlist(idmefv2_service_t *ptr, libidmefv2_string_t *portlist);
int idmefv2_service_new_portlist(idmefv2_service_t *ptr, libidmefv2_string_t **ret);



libidmefv2_string_t *idmefv2_service_get_protocol(idmefv2_service_t *ptr);

void idmefv2_service_set_protocol(idmefv2_service_t *ptr, libidmefv2_string_t *protocol);
int idmefv2_service_new_protocol(idmefv2_service_t *ptr, libidmefv2_string_t **ret);



        


/*
 * struct {
 *       IDMEFV2_OBJECT;
 *       REFCOUNT;
 *         libidmefv2_string_t *ident;
 *         idmefv2_location_t *location;
 *        LISTED_OBJECT(node_name_list, idmefv2_node_name_t);
 *        LISTED_OBJECT(interface_list, idmefv2_interface_t);
 * } TYPE_ID(idmefv2_node_t, 27);
 */

typedef struct idmefv2_node idmefv2_node_t;


int idmefv2_node_new(idmefv2_node_t **ret);
int idmefv2_node_copy(const idmefv2_node_t *src, idmefv2_node_t *dst);
int idmefv2_node_clone(idmefv2_node_t *src, idmefv2_node_t **dst);
int idmefv2_node_compare(const idmefv2_node_t *obj1, const idmefv2_node_t *obj2);


idmefv2_node_t *idmefv2_node_ref(idmefv2_node_t *node);

#ifndef SWIG

int _idmefv2_node_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_node_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_node_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_node_destroy(idmefv2_node_t *ptr);




libidmefv2_string_t *idmefv2_node_get_ident(idmefv2_node_t *ptr);

void idmefv2_node_set_ident(idmefv2_node_t *ptr, libidmefv2_string_t *ident);
int idmefv2_node_new_ident(idmefv2_node_t *ptr, libidmefv2_string_t **ret);



idmefv2_location_t *idmefv2_node_get_location(idmefv2_node_t *ptr);

void idmefv2_node_set_location(idmefv2_node_t *ptr, idmefv2_location_t *location);
int idmefv2_node_new_location(idmefv2_node_t *ptr, idmefv2_location_t **ret);


idmefv2_node_name_t *idmefv2_node_get_next_node_name(idmefv2_node_t *node, idmefv2_node_name_t *node_name_cur);
void idmefv2_node_set_node_name(idmefv2_node_t *ptr, idmefv2_node_name_t *object, int pos);
int idmefv2_node_new_node_name(idmefv2_node_t *ptr, idmefv2_node_name_t **ret, int pos);


idmefv2_interface_t *idmefv2_node_get_next_interface(idmefv2_node_t *node, idmefv2_interface_t *interface_cur);
void idmefv2_node_set_interface(idmefv2_node_t *ptr, idmefv2_interface_t *object, int pos);
int idmefv2_node_new_interface(idmefv2_node_t *ptr, idmefv2_interface_t **ret, int pos);



        
typedef enum {
        IDMEFV2_USER_CATEGORY_UNKNOWN = 0,
        IDMEFV2_USER_CATEGORY_APPLICATION = 1,
        IDMEFV2_USER_CATEGORY_OS_DEVICE = 2,
} idmefv2_user_category_t;
        
idmefv2_user_category_t idmefv2_user_category_to_numeric(const char *name);
const char *idmefv2_user_category_to_string(idmefv2_user_category_t val);

        


/*
 * struct {
 *       IDMEFV2_OBJECT;
 *       REFCOUNT;
 *         libidmefv2_string_t *ident;
 *         idmefv2_user_category_t category;
 *        LISTED_OBJECT(user_id_list, idmefv2_user_id_t);
 * } TYPE_ID(idmefv2_user_t, 29);
 */

typedef struct idmefv2_user idmefv2_user_t;


int idmefv2_user_new(idmefv2_user_t **ret);
int idmefv2_user_copy(const idmefv2_user_t *src, idmefv2_user_t *dst);
int idmefv2_user_clone(idmefv2_user_t *src, idmefv2_user_t **dst);
int idmefv2_user_compare(const idmefv2_user_t *obj1, const idmefv2_user_t *obj2);


idmefv2_user_t *idmefv2_user_ref(idmefv2_user_t *user);

#ifndef SWIG

int _idmefv2_user_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_user_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_user_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_user_destroy(idmefv2_user_t *ptr);




libidmefv2_string_t *idmefv2_user_get_ident(idmefv2_user_t *ptr);

void idmefv2_user_set_ident(idmefv2_user_t *ptr, libidmefv2_string_t *ident);
int idmefv2_user_new_ident(idmefv2_user_t *ptr, libidmefv2_string_t **ret);



idmefv2_user_category_t idmefv2_user_get_category(idmefv2_user_t *ptr);

void idmefv2_user_set_category(idmefv2_user_t *ptr, idmefv2_user_category_t category);
int idmefv2_user_new_category(idmefv2_user_t *ptr, idmefv2_user_category_t **ret);


idmefv2_user_id_t *idmefv2_user_get_next_user_id(idmefv2_user_t *user, idmefv2_user_id_t *user_id_cur);
void idmefv2_user_set_user_id(idmefv2_user_t *ptr, idmefv2_user_id_t *object, int pos);
int idmefv2_user_new_user_id(idmefv2_user_t *ptr, idmefv2_user_id_t **ret, int pos);



        
typedef enum {
        IDMEFV2_IMPACT_TYPE_ORIGIN_UNKNOWN = 0,
        IDMEFV2_IMPACT_TYPE_ORIGIN_VENDOR_SPECIFIC = 1,
        IDMEFV2_IMPACT_TYPE_ORIGIN_USER_SPECIFIC = 2,
        IDMEFV2_IMPACT_TYPE_ORIGIN_ETSI = 3,
} idmefv2_impact_type_origin_t;
        
idmefv2_impact_type_origin_t idmefv2_impact_type_origin_to_numeric(const char *name);
const char *idmefv2_impact_type_origin_to_string(idmefv2_impact_type_origin_t val);

        


/*
 * struct {
 *       IDMEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         idmefv2_impact_type_origin_t origin;
 *         libidmefv2_string_t *meaning;
 *        REQUIRED(libidmefv2_string_t, *name);
 *        REQUIRED(libidmefv2_string_t, *url);
 * } TYPE_ID(idmefv2_impact_type_t, 31);
 */

typedef struct idmefv2_impact_type idmefv2_impact_type_t;


int idmefv2_impact_type_new(idmefv2_impact_type_t **ret);
int idmefv2_impact_type_copy(const idmefv2_impact_type_t *src, idmefv2_impact_type_t *dst);
int idmefv2_impact_type_clone(idmefv2_impact_type_t *src, idmefv2_impact_type_t **dst);
int idmefv2_impact_type_compare(const idmefv2_impact_type_t *obj1, const idmefv2_impact_type_t *obj2);


idmefv2_impact_type_t *idmefv2_impact_type_ref(idmefv2_impact_type_t *impact_type);

#ifndef SWIG

int _idmefv2_impact_type_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_impact_type_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_impact_type_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_impact_type_destroy(idmefv2_impact_type_t *ptr);




idmefv2_impact_type_origin_t idmefv2_impact_type_get_origin(idmefv2_impact_type_t *ptr);

void idmefv2_impact_type_set_origin(idmefv2_impact_type_t *ptr, idmefv2_impact_type_origin_t origin);
int idmefv2_impact_type_new_origin(idmefv2_impact_type_t *ptr, idmefv2_impact_type_origin_t **ret);



libidmefv2_string_t *idmefv2_impact_type_get_meaning(idmefv2_impact_type_t *ptr);

void idmefv2_impact_type_set_meaning(idmefv2_impact_type_t *ptr, libidmefv2_string_t *meaning);
int idmefv2_impact_type_new_meaning(idmefv2_impact_type_t *ptr, libidmefv2_string_t **ret);



libidmefv2_string_t *idmefv2_impact_type_get_name(idmefv2_impact_type_t *ptr);

void idmefv2_impact_type_set_name(idmefv2_impact_type_t *ptr, libidmefv2_string_t *name);
int idmefv2_impact_type_new_name(idmefv2_impact_type_t *ptr, libidmefv2_string_t **ret);



libidmefv2_string_t *idmefv2_impact_type_get_url(idmefv2_impact_type_t *ptr);

void idmefv2_impact_type_set_url(idmefv2_impact_type_t *ptr, libidmefv2_string_t *url);
int idmefv2_impact_type_new_url(idmefv2_impact_type_t *ptr, libidmefv2_string_t **ret);



        
typedef enum {
        IDMEFV2_SOURCE_SPOOFED_UNKNOWN = 0,
        IDMEFV2_SOURCE_SPOOFED_YES = 1,
        IDMEFV2_SOURCE_SPOOFED_NO = 2,
} idmefv2_source_spoofed_t;
        
idmefv2_source_spoofed_t idmefv2_source_spoofed_to_numeric(const char *name);
const char *idmefv2_source_spoofed_to_string(idmefv2_source_spoofed_t val);

        


/*
 * struct {
 *       IDMEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         libidmefv2_string_t *ident;
 *         idmefv2_source_spoofed_t spoofed;
 *         idmefv2_node_t *node;
 *         idmefv2_user_t *user;
 *         idmefv2_process_t *process;
 *         idmefv2_service_t *service;
 * } TYPE_ID(idmefv2_source_t, 33);
 */

typedef struct idmefv2_source idmefv2_source_t;


int idmefv2_source_new(idmefv2_source_t **ret);
int idmefv2_source_copy(const idmefv2_source_t *src, idmefv2_source_t *dst);
int idmefv2_source_clone(idmefv2_source_t *src, idmefv2_source_t **dst);
int idmefv2_source_compare(const idmefv2_source_t *obj1, const idmefv2_source_t *obj2);


idmefv2_source_t *idmefv2_source_ref(idmefv2_source_t *source);

#ifndef SWIG

int _idmefv2_source_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_source_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_source_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_source_destroy(idmefv2_source_t *ptr);




libidmefv2_string_t *idmefv2_source_get_ident(idmefv2_source_t *ptr);

void idmefv2_source_set_ident(idmefv2_source_t *ptr, libidmefv2_string_t *ident);
int idmefv2_source_new_ident(idmefv2_source_t *ptr, libidmefv2_string_t **ret);



idmefv2_source_spoofed_t idmefv2_source_get_spoofed(idmefv2_source_t *ptr);

void idmefv2_source_set_spoofed(idmefv2_source_t *ptr, idmefv2_source_spoofed_t spoofed);
int idmefv2_source_new_spoofed(idmefv2_source_t *ptr, idmefv2_source_spoofed_t **ret);



idmefv2_node_t *idmefv2_source_get_node(idmefv2_source_t *ptr);

void idmefv2_source_set_node(idmefv2_source_t *ptr, idmefv2_node_t *node);
int idmefv2_source_new_node(idmefv2_source_t *ptr, idmefv2_node_t **ret);



idmefv2_user_t *idmefv2_source_get_user(idmefv2_source_t *ptr);

void idmefv2_source_set_user(idmefv2_source_t *ptr, idmefv2_user_t *user);
int idmefv2_source_new_user(idmefv2_source_t *ptr, idmefv2_user_t **ret);



idmefv2_process_t *idmefv2_source_get_process(idmefv2_source_t *ptr);

void idmefv2_source_set_process(idmefv2_source_t *ptr, idmefv2_process_t *process);
int idmefv2_source_new_process(idmefv2_source_t *ptr, idmefv2_process_t **ret);



idmefv2_service_t *idmefv2_source_get_service(idmefv2_source_t *ptr);

void idmefv2_source_set_service(idmefv2_source_t *ptr, idmefv2_service_t *service);
int idmefv2_source_new_service(idmefv2_source_t *ptr, idmefv2_service_t **ret);



        
typedef enum {
        IDMEFV2_TARGET_DECOY_UNKNOWN = 0,
        IDMEFV2_TARGET_DECOY_YES = 1,
        IDMEFV2_TARGET_DECOY_NO = 2,
} idmefv2_target_decoy_t;
        
idmefv2_target_decoy_t idmefv2_target_decoy_to_numeric(const char *name);
const char *idmefv2_target_decoy_to_string(idmefv2_target_decoy_t val);

        


/*
 * struct {
 *       IDMEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         libidmefv2_string_t *ident;
 *         idmefv2_target_decoy_t decoy;
 *         idmefv2_node_t *node;
 *         idmefv2_user_t *user;
 *         idmefv2_process_t *process;
 *         idmefv2_service_t *service;
 *         idmefv2_file_t *file;
 * } TYPE_ID(idmefv2_target_t, 35);
 */

typedef struct idmefv2_target idmefv2_target_t;


int idmefv2_target_new(idmefv2_target_t **ret);
int idmefv2_target_copy(const idmefv2_target_t *src, idmefv2_target_t *dst);
int idmefv2_target_clone(idmefv2_target_t *src, idmefv2_target_t **dst);
int idmefv2_target_compare(const idmefv2_target_t *obj1, const idmefv2_target_t *obj2);


idmefv2_target_t *idmefv2_target_ref(idmefv2_target_t *target);

#ifndef SWIG

int _idmefv2_target_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_target_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_target_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_target_destroy(idmefv2_target_t *ptr);




libidmefv2_string_t *idmefv2_target_get_ident(idmefv2_target_t *ptr);

void idmefv2_target_set_ident(idmefv2_target_t *ptr, libidmefv2_string_t *ident);
int idmefv2_target_new_ident(idmefv2_target_t *ptr, libidmefv2_string_t **ret);



idmefv2_target_decoy_t idmefv2_target_get_decoy(idmefv2_target_t *ptr);

void idmefv2_target_set_decoy(idmefv2_target_t *ptr, idmefv2_target_decoy_t decoy);
int idmefv2_target_new_decoy(idmefv2_target_t *ptr, idmefv2_target_decoy_t **ret);



idmefv2_node_t *idmefv2_target_get_node(idmefv2_target_t *ptr);

void idmefv2_target_set_node(idmefv2_target_t *ptr, idmefv2_node_t *node);
int idmefv2_target_new_node(idmefv2_target_t *ptr, idmefv2_node_t **ret);



idmefv2_user_t *idmefv2_target_get_user(idmefv2_target_t *ptr);

void idmefv2_target_set_user(idmefv2_target_t *ptr, idmefv2_user_t *user);
int idmefv2_target_new_user(idmefv2_target_t *ptr, idmefv2_user_t **ret);



idmefv2_process_t *idmefv2_target_get_process(idmefv2_target_t *ptr);

void idmefv2_target_set_process(idmefv2_target_t *ptr, idmefv2_process_t *process);
int idmefv2_target_new_process(idmefv2_target_t *ptr, idmefv2_process_t **ret);



idmefv2_service_t *idmefv2_target_get_service(idmefv2_target_t *ptr);

void idmefv2_target_set_service(idmefv2_target_t *ptr, idmefv2_service_t *service);
int idmefv2_target_new_service(idmefv2_target_t *ptr, idmefv2_service_t **ret);



idmefv2_file_t *idmefv2_target_get_file(idmefv2_target_t *ptr);

void idmefv2_target_set_file(idmefv2_target_t *ptr, idmefv2_file_t *file);
int idmefv2_target_new_file(idmefv2_target_t *ptr, idmefv2_file_t **ret);



        


/*
 * struct {
 *       IDMEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *        REQUIRED(idmefv2_time_t, *timestamp);
 *        REQUIRED(libidmefv2_string_t, *name);
 *        REQUIRED(idmefv2_data_t, *data);
 *         idmefv2_node_t *node;
 *         idmefv2_file_t *file;
 * } TYPE_ID(idmefv2_original_data_t, 36);
 */

typedef struct idmefv2_original_data idmefv2_original_data_t;


int idmefv2_original_data_new(idmefv2_original_data_t **ret);
int idmefv2_original_data_copy(const idmefv2_original_data_t *src, idmefv2_original_data_t *dst);
int idmefv2_original_data_clone(idmefv2_original_data_t *src, idmefv2_original_data_t **dst);
int idmefv2_original_data_compare(const idmefv2_original_data_t *obj1, const idmefv2_original_data_t *obj2);


idmefv2_original_data_t *idmefv2_original_data_ref(idmefv2_original_data_t *original_data);

#ifndef SWIG

int _idmefv2_original_data_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_original_data_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_original_data_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_original_data_destroy(idmefv2_original_data_t *ptr);




idmefv2_time_t *idmefv2_original_data_get_timestamp(idmefv2_original_data_t *ptr);

void idmefv2_original_data_set_timestamp(idmefv2_original_data_t *ptr, idmefv2_time_t *timestamp);
int idmefv2_original_data_new_timestamp(idmefv2_original_data_t *ptr, idmefv2_time_t **ret);



libidmefv2_string_t *idmefv2_original_data_get_name(idmefv2_original_data_t *ptr);

void idmefv2_original_data_set_name(idmefv2_original_data_t *ptr, libidmefv2_string_t *name);
int idmefv2_original_data_new_name(idmefv2_original_data_t *ptr, libidmefv2_string_t **ret);



idmefv2_data_t *idmefv2_original_data_get_data(idmefv2_original_data_t *ptr);

void idmefv2_original_data_set_data(idmefv2_original_data_t *ptr, idmefv2_data_t *data);
int idmefv2_original_data_new_data(idmefv2_original_data_t *ptr, idmefv2_data_t **ret);



idmefv2_node_t *idmefv2_original_data_get_node(idmefv2_original_data_t *ptr);

void idmefv2_original_data_set_node(idmefv2_original_data_t *ptr, idmefv2_node_t *node);
int idmefv2_original_data_new_node(idmefv2_original_data_t *ptr, idmefv2_node_t **ret);



idmefv2_file_t *idmefv2_original_data_get_file(idmefv2_original_data_t *ptr);

void idmefv2_original_data_set_file(idmefv2_original_data_t *ptr, idmefv2_file_t *file);
int idmefv2_original_data_new_file(idmefv2_original_data_t *ptr, idmefv2_file_t **ret);



        
typedef enum {
        IDMEFV2_OBSERVABLE_ORIGIN_UNKNOWN = 0,
        IDMEFV2_OBSERVABLE_ORIGIN_VENDOR_SPECIFIC = 1,
        IDMEFV2_OBSERVABLE_ORIGIN_USER_SPECIFIC = 2,
        IDMEFV2_OBSERVABLE_ORIGIN_ETSI = 3,
} idmefv2_observable_origin_t;
        
idmefv2_observable_origin_t idmefv2_observable_origin_to_numeric(const char *name);
const char *idmefv2_observable_origin_to_string(idmefv2_observable_origin_t val);

        


/*
 * struct {
 *       IDMEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         idmefv2_observable_origin_t origin;
 *         libidmefv2_string_t *meaning;
 *        REQUIRED(libidmefv2_string_t, *url);
 *        REQUIRED(libidmefv2_string_t, *name);
 * } TYPE_ID(idmefv2_observable_t, 38);
 */

typedef struct idmefv2_observable idmefv2_observable_t;


int idmefv2_observable_new(idmefv2_observable_t **ret);
int idmefv2_observable_copy(const idmefv2_observable_t *src, idmefv2_observable_t *dst);
int idmefv2_observable_clone(idmefv2_observable_t *src, idmefv2_observable_t **dst);
int idmefv2_observable_compare(const idmefv2_observable_t *obj1, const idmefv2_observable_t *obj2);


idmefv2_observable_t *idmefv2_observable_ref(idmefv2_observable_t *observable);

#ifndef SWIG

int _idmefv2_observable_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_observable_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_observable_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_observable_destroy(idmefv2_observable_t *ptr);




idmefv2_observable_origin_t idmefv2_observable_get_origin(idmefv2_observable_t *ptr);

void idmefv2_observable_set_origin(idmefv2_observable_t *ptr, idmefv2_observable_origin_t origin);
int idmefv2_observable_new_origin(idmefv2_observable_t *ptr, idmefv2_observable_origin_t **ret);



libidmefv2_string_t *idmefv2_observable_get_meaning(idmefv2_observable_t *ptr);

void idmefv2_observable_set_meaning(idmefv2_observable_t *ptr, libidmefv2_string_t *meaning);
int idmefv2_observable_new_meaning(idmefv2_observable_t *ptr, libidmefv2_string_t **ret);



libidmefv2_string_t *idmefv2_observable_get_url(idmefv2_observable_t *ptr);

void idmefv2_observable_set_url(idmefv2_observable_t *ptr, libidmefv2_string_t *url);
int idmefv2_observable_new_url(idmefv2_observable_t *ptr, libidmefv2_string_t **ret);



libidmefv2_string_t *idmefv2_observable_get_name(idmefv2_observable_t *ptr);

void idmefv2_observable_set_name(idmefv2_observable_t *ptr, libidmefv2_string_t *name);
int idmefv2_observable_new_name(idmefv2_observable_t *ptr, libidmefv2_string_t **ret);



        
typedef enum {
        IDMEFV2_TAKEN_ACTION_CATEGORY_BLOCK_INSTALLED = 0,
        IDMEFV2_TAKEN_ACTION_CATEGORY_NOTIFICATION_SENT = 1,
        IDMEFV2_TAKEN_ACTION_CATEGORY_TAKEN_OFFLINE = 2,
        IDMEFV2_TAKEN_ACTION_CATEGORY_OTHER = 3,
} idmefv2_taken_action_category_t;
        
idmefv2_taken_action_category_t idmefv2_taken_action_category_to_numeric(const char *name);
const char *idmefv2_taken_action_category_to_string(idmefv2_taken_action_category_t val);

        


/*
 * struct {
 *       IDMEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         idmefv2_taken_action_category_t category;
 * } TYPE_ID(idmefv2_taken_action_t, 40);
 */

typedef struct idmefv2_taken_action idmefv2_taken_action_t;


int idmefv2_taken_action_new(idmefv2_taken_action_t **ret);
int idmefv2_taken_action_copy(const idmefv2_taken_action_t *src, idmefv2_taken_action_t *dst);
int idmefv2_taken_action_clone(idmefv2_taken_action_t *src, idmefv2_taken_action_t **dst);
int idmefv2_taken_action_compare(const idmefv2_taken_action_t *obj1, const idmefv2_taken_action_t *obj2);


idmefv2_taken_action_t *idmefv2_taken_action_ref(idmefv2_taken_action_t *taken_action);

#ifndef SWIG

int _idmefv2_taken_action_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_taken_action_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_taken_action_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_taken_action_destroy(idmefv2_taken_action_t *ptr);




idmefv2_taken_action_category_t idmefv2_taken_action_get_category(idmefv2_taken_action_t *ptr);

void idmefv2_taken_action_set_category(idmefv2_taken_action_t *ptr, idmefv2_taken_action_category_t category);
int idmefv2_taken_action_new_category(idmefv2_taken_action_t *ptr, idmefv2_taken_action_category_t **ret);



        
typedef enum {
        IDMEFV2_REFERENCE_ORIGIN_UNKNOWN = 0,
        IDMEFV2_REFERENCE_ORIGIN_VENDOR_SPECIFIC = 1,
        IDMEFV2_REFERENCE_ORIGIN_USER_SPECIFIC = 2,
        IDMEFV2_REFERENCE_ORIGIN_BUGTRAQID = 3,
        IDMEFV2_REFERENCE_ORIGIN_CVE = 4,
        IDMEFV2_REFERENCE_ORIGIN_OSVDB = 5,
        IDMEFV2_REFERENCE_ORIGIN_CERT_SPECIFIC = 6,
} idmefv2_reference_origin_t;
        
idmefv2_reference_origin_t idmefv2_reference_origin_to_numeric(const char *name);
const char *idmefv2_reference_origin_to_string(idmefv2_reference_origin_t val);

        


/*
 * struct {
 *       IDMEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         idmefv2_reference_origin_t origin;
 *         libidmefv2_string_t *meaning;
 *         libidmefv2_string_t *author;
 *         idmefv2_time_t *publication_time;
 *         libidmefv2_string_t *version;
 *        REQUIRED(libidmefv2_string_t, *name);
 *        REQUIRED(libidmefv2_string_t, *url);
 * } TYPE_ID(idmefv2_reference_t, 42);
 */

typedef struct idmefv2_reference idmefv2_reference_t;


int idmefv2_reference_new(idmefv2_reference_t **ret);
int idmefv2_reference_copy(const idmefv2_reference_t *src, idmefv2_reference_t *dst);
int idmefv2_reference_clone(idmefv2_reference_t *src, idmefv2_reference_t **dst);
int idmefv2_reference_compare(const idmefv2_reference_t *obj1, const idmefv2_reference_t *obj2);


idmefv2_reference_t *idmefv2_reference_ref(idmefv2_reference_t *reference);

#ifndef SWIG

int _idmefv2_reference_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_reference_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_reference_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_reference_destroy(idmefv2_reference_t *ptr);




idmefv2_reference_origin_t idmefv2_reference_get_origin(idmefv2_reference_t *ptr);

void idmefv2_reference_set_origin(idmefv2_reference_t *ptr, idmefv2_reference_origin_t origin);
int idmefv2_reference_new_origin(idmefv2_reference_t *ptr, idmefv2_reference_origin_t **ret);



libidmefv2_string_t *idmefv2_reference_get_meaning(idmefv2_reference_t *ptr);

void idmefv2_reference_set_meaning(idmefv2_reference_t *ptr, libidmefv2_string_t *meaning);
int idmefv2_reference_new_meaning(idmefv2_reference_t *ptr, libidmefv2_string_t **ret);



libidmefv2_string_t *idmefv2_reference_get_author(idmefv2_reference_t *ptr);

void idmefv2_reference_set_author(idmefv2_reference_t *ptr, libidmefv2_string_t *author);
int idmefv2_reference_new_author(idmefv2_reference_t *ptr, libidmefv2_string_t **ret);



idmefv2_time_t *idmefv2_reference_get_publication_time(idmefv2_reference_t *ptr);

void idmefv2_reference_set_publication_time(idmefv2_reference_t *ptr, idmefv2_time_t *publication_time);
int idmefv2_reference_new_publication_time(idmefv2_reference_t *ptr, idmefv2_time_t **ret);



libidmefv2_string_t *idmefv2_reference_get_version(idmefv2_reference_t *ptr);

void idmefv2_reference_set_version(idmefv2_reference_t *ptr, libidmefv2_string_t *version);
int idmefv2_reference_new_version(idmefv2_reference_t *ptr, libidmefv2_string_t **ret);



libidmefv2_string_t *idmefv2_reference_get_name(idmefv2_reference_t *ptr);

void idmefv2_reference_set_name(idmefv2_reference_t *ptr, libidmefv2_string_t *name);
int idmefv2_reference_new_name(idmefv2_reference_t *ptr, libidmefv2_string_t **ret);



libidmefv2_string_t *idmefv2_reference_get_url(idmefv2_reference_t *ptr);

void idmefv2_reference_set_url(idmefv2_reference_t *ptr, libidmefv2_string_t *url);
int idmefv2_reference_new_url(idmefv2_reference_t *ptr, libidmefv2_string_t **ret);



        
typedef enum {
        IDMEFV2_ANALYZER_CLASS_UNKNOWN = 0,
        IDMEFV2_ANALYZER_CLASS_EXT_CLASS = 1,
        IDMEFV2_ANALYZER_CLASS_NIDS = 2,
        IDMEFV2_ANALYZER_CLASS_SNIDS = 3,
        IDMEFV2_ANALYZER_CLASS_HIDS = 4,
        IDMEFV2_ANALYZER_CLASS_IPS = 5,
        IDMEFV2_ANALYZER_CLASS_FILE_INTEGRITY_CHECKER = 6,
        IDMEFV2_ANALYZER_CLASS_INTEGRITY_CHECKER = 7,
        IDMEFV2_ANALYZER_CLASS_LOG_ANALYZER = 8,
        IDMEFV2_ANALYZER_CLASS_NETWORK_ANTI_VIRUS = 9,
        IDMEFV2_ANALYZER_CLASS_HOST_ANTI_VIRUS = 10,
        IDMEFV2_ANALYZER_CLASS_CORRELATOR = 11,
        IDMEFV2_ANALYZER_CLASS_FIREWALL = 12,
        IDMEFV2_ANALYZER_CLASS_HONEYPOT = 13,
        IDMEFV2_ANALYZER_CLASS_SOFTWARE_MONITORING = 14,
        IDMEFV2_ANALYZER_CLASS_HARDWARE_MONITORING = 15,
        IDMEFV2_ANALYZER_CLASS_ACTIVE_VULNERABILITY_SCANNER = 16,
        IDMEFV2_ANALYZER_CLASS_PASSIVE_VULNERABILITY_SCANNER = 17,
        IDMEFV2_ANALYZER_CLASS_ALARM_HARDWARE = 18,
        IDMEFV2_ANALYZER_CLASS_PRIVATE_BRANCH_EXCHANGE = 19,
} idmefv2_analyzer_class_t;
        
idmefv2_analyzer_class_t idmefv2_analyzer_class_to_numeric(const char *name);
const char *idmefv2_analyzer_class_to_string(idmefv2_analyzer_class_t val);

        
typedef enum {
        IDMEFV2_ANALYZER_ANALYZERACTION_CREATE = 0,
        IDMEFV2_ANALYZER_ANALYZERACTION_FORWARD = 1,
        IDMEFV2_ANALYZER_ANALYZERACTION_EDIT = 2,
} idmefv2_analyzer_analyzeraction_t;
        
idmefv2_analyzer_analyzeraction_t idmefv2_analyzer_analyzeraction_to_numeric(const char *name);
const char *idmefv2_analyzer_analyzeraction_to_string(idmefv2_analyzer_analyzeraction_t val);

        


/*
 * struct {
 *       IDMEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *        REQUIRED(libidmefv2_string_t, *analyzerid);
 *         libidmefv2_string_t *name;
 *         libidmefv2_string_t *manufacturer;
 *         libidmefv2_string_t *model;
 *         libidmefv2_string_t *version;
 *         idmefv2_analyzer_class_t class;
 *         libidmefv2_string_t *ostype;
 *         libidmefv2_string_t *osversion;
 *         libidmefv2_string_t *ext_class;
 *         idmefv2_analyzer_analyzeraction_t analyzeraction;
 *         libidmefv2_string_t *actionhistory;
 *         idmefv2_node_t *node;
 *         idmefv2_process_t *process;
 *         idmefv2_time_t *analyzer_time;
 * } TYPE_ID(idmefv2_analyzer_t, 43);
 */

typedef struct idmefv2_analyzer idmefv2_analyzer_t;


int idmefv2_analyzer_new(idmefv2_analyzer_t **ret);
int idmefv2_analyzer_copy(const idmefv2_analyzer_t *src, idmefv2_analyzer_t *dst);
int idmefv2_analyzer_clone(idmefv2_analyzer_t *src, idmefv2_analyzer_t **dst);
int idmefv2_analyzer_compare(const idmefv2_analyzer_t *obj1, const idmefv2_analyzer_t *obj2);


idmefv2_analyzer_t *idmefv2_analyzer_ref(idmefv2_analyzer_t *analyzer);

#ifndef SWIG

int _idmefv2_analyzer_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_analyzer_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_analyzer_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_analyzer_destroy(idmefv2_analyzer_t *ptr);




libidmefv2_string_t *idmefv2_analyzer_get_analyzerid(idmefv2_analyzer_t *ptr);

void idmefv2_analyzer_set_analyzerid(idmefv2_analyzer_t *ptr, libidmefv2_string_t *analyzerid);
int idmefv2_analyzer_new_analyzerid(idmefv2_analyzer_t *ptr, libidmefv2_string_t **ret);



libidmefv2_string_t *idmefv2_analyzer_get_name(idmefv2_analyzer_t *ptr);

void idmefv2_analyzer_set_name(idmefv2_analyzer_t *ptr, libidmefv2_string_t *name);
int idmefv2_analyzer_new_name(idmefv2_analyzer_t *ptr, libidmefv2_string_t **ret);



libidmefv2_string_t *idmefv2_analyzer_get_manufacturer(idmefv2_analyzer_t *ptr);

void idmefv2_analyzer_set_manufacturer(idmefv2_analyzer_t *ptr, libidmefv2_string_t *manufacturer);
int idmefv2_analyzer_new_manufacturer(idmefv2_analyzer_t *ptr, libidmefv2_string_t **ret);



libidmefv2_string_t *idmefv2_analyzer_get_model(idmefv2_analyzer_t *ptr);

void idmefv2_analyzer_set_model(idmefv2_analyzer_t *ptr, libidmefv2_string_t *model);
int idmefv2_analyzer_new_model(idmefv2_analyzer_t *ptr, libidmefv2_string_t **ret);



libidmefv2_string_t *idmefv2_analyzer_get_version(idmefv2_analyzer_t *ptr);

void idmefv2_analyzer_set_version(idmefv2_analyzer_t *ptr, libidmefv2_string_t *version);
int idmefv2_analyzer_new_version(idmefv2_analyzer_t *ptr, libidmefv2_string_t **ret);



idmefv2_analyzer_class_t idmefv2_analyzer_get_class(idmefv2_analyzer_t *ptr);

void idmefv2_analyzer_set_class(idmefv2_analyzer_t *ptr, idmefv2_analyzer_class_t class_str);
int idmefv2_analyzer_new_class(idmefv2_analyzer_t *ptr, idmefv2_analyzer_class_t **ret);



libidmefv2_string_t *idmefv2_analyzer_get_ostype(idmefv2_analyzer_t *ptr);

void idmefv2_analyzer_set_ostype(idmefv2_analyzer_t *ptr, libidmefv2_string_t *ostype);
int idmefv2_analyzer_new_ostype(idmefv2_analyzer_t *ptr, libidmefv2_string_t **ret);



libidmefv2_string_t *idmefv2_analyzer_get_osversion(idmefv2_analyzer_t *ptr);

void idmefv2_analyzer_set_osversion(idmefv2_analyzer_t *ptr, libidmefv2_string_t *osversion);
int idmefv2_analyzer_new_osversion(idmefv2_analyzer_t *ptr, libidmefv2_string_t **ret);



libidmefv2_string_t *idmefv2_analyzer_get_ext_class(idmefv2_analyzer_t *ptr);

void idmefv2_analyzer_set_ext_class(idmefv2_analyzer_t *ptr, libidmefv2_string_t *ext_class);
int idmefv2_analyzer_new_ext_class(idmefv2_analyzer_t *ptr, libidmefv2_string_t **ret);



idmefv2_analyzer_analyzeraction_t idmefv2_analyzer_get_analyzeraction(idmefv2_analyzer_t *ptr);

void idmefv2_analyzer_set_analyzeraction(idmefv2_analyzer_t *ptr, idmefv2_analyzer_analyzeraction_t analyzeraction);
int idmefv2_analyzer_new_analyzeraction(idmefv2_analyzer_t *ptr, idmefv2_analyzer_analyzeraction_t **ret);



libidmefv2_string_t *idmefv2_analyzer_get_actionhistory(idmefv2_analyzer_t *ptr);

void idmefv2_analyzer_set_actionhistory(idmefv2_analyzer_t *ptr, libidmefv2_string_t *actionhistory);
int idmefv2_analyzer_new_actionhistory(idmefv2_analyzer_t *ptr, libidmefv2_string_t **ret);



idmefv2_node_t *idmefv2_analyzer_get_node(idmefv2_analyzer_t *ptr);

void idmefv2_analyzer_set_node(idmefv2_analyzer_t *ptr, idmefv2_node_t *node);
int idmefv2_analyzer_new_node(idmefv2_analyzer_t *ptr, idmefv2_node_t **ret);



idmefv2_process_t *idmefv2_analyzer_get_process(idmefv2_analyzer_t *ptr);

void idmefv2_analyzer_set_process(idmefv2_analyzer_t *ptr, idmefv2_process_t *process);
int idmefv2_analyzer_new_process(idmefv2_analyzer_t *ptr, idmefv2_process_t **ret);



idmefv2_time_t *idmefv2_analyzer_get_analyzer_time(idmefv2_analyzer_t *ptr);

void idmefv2_analyzer_set_analyzer_time(idmefv2_analyzer_t *ptr, idmefv2_time_t *analyzer_time);
int idmefv2_analyzer_new_analyzer_time(idmefv2_analyzer_t *ptr, idmefv2_time_t **ret);



        
typedef enum {
        IDMEFV2_ADDITIONAL_DATA_TYPE_ERROR = -1,
        IDMEFV2_ADDITIONAL_DATA_TYPE_STRING = 0,
        IDMEFV2_ADDITIONAL_DATA_TYPE_BYTE = 1,
        IDMEFV2_ADDITIONAL_DATA_TYPE_CHARACTER = 2,
        IDMEFV2_ADDITIONAL_DATA_TYPE_DATE_TIME = 3,
        IDMEFV2_ADDITIONAL_DATA_TYPE_INTEGER = 4,
        IDMEFV2_ADDITIONAL_DATA_TYPE_NTPSTAMP = 5,
        IDMEFV2_ADDITIONAL_DATA_TYPE_PORTLIST = 6,
        IDMEFV2_ADDITIONAL_DATA_TYPE_REAL = 7,
        IDMEFV2_ADDITIONAL_DATA_TYPE_BOOLEAN = 8,
        IDMEFV2_ADDITIONAL_DATA_TYPE_BYTE_STRING = 9,
        IDMEFV2_ADDITIONAL_DATA_TYPE_XML = 10,
} idmefv2_additional_data_type_t;
        
idmefv2_additional_data_type_t idmefv2_additional_data_type_to_numeric(const char *name);
const char *idmefv2_additional_data_type_to_string(idmefv2_additional_data_type_t val);

        


/*
 * struct {
 *        IS_KEY_LISTED(meaning);
 *       REFCOUNT;
 *       IGNORED(libidmefv2_bool_t, _type_is_set);
 *         idmefv2_additional_data_type_t type;
 *        REQUIRED(idmefv2_data_t, *data);
 * } TYPE_ID(idmefv2_additional_data_t, 45);
 */

typedef struct idmefv2_additional_data idmefv2_additional_data_t;


int idmefv2_additional_data_new(idmefv2_additional_data_t **ret);
int idmefv2_additional_data_copy(const idmefv2_additional_data_t *src, idmefv2_additional_data_t *dst);
int idmefv2_additional_data_clone(idmefv2_additional_data_t *src, idmefv2_additional_data_t **dst);
int idmefv2_additional_data_compare(const idmefv2_additional_data_t *obj1, const idmefv2_additional_data_t *obj2);


idmefv2_additional_data_t *idmefv2_additional_data_ref(idmefv2_additional_data_t *additional_data);

#ifndef SWIG

int _idmefv2_additional_data_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_additional_data_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_additional_data_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_additional_data_destroy(idmefv2_additional_data_t *ptr);




libidmefv2_string_t *idmefv2_additional_data_get_meaning(idmefv2_additional_data_t *ptr);

void idmefv2_additional_data_set_meaning(idmefv2_additional_data_t *ptr, libidmefv2_string_t *meaning);
int idmefv2_additional_data_new_meaning(idmefv2_additional_data_t *ptr, libidmefv2_string_t **ret);



idmefv2_additional_data_type_t idmefv2_additional_data_get_type(idmefv2_additional_data_t *ptr);

void idmefv2_additional_data_set_type(idmefv2_additional_data_t *ptr, idmefv2_additional_data_type_t type);
int idmefv2_additional_data_new_type(idmefv2_additional_data_t *ptr, idmefv2_additional_data_type_t **ret);



idmefv2_data_t *idmefv2_additional_data_get_data(idmefv2_additional_data_t *ptr);

void idmefv2_additional_data_set_data(idmefv2_additional_data_t *ptr, idmefv2_data_t *data);
int idmefv2_additional_data_new_data(idmefv2_additional_data_t *ptr, idmefv2_data_t **ret);



        


/*
 * struct {
 *       IDMEFV2_OBJECT;
 *       REFCOUNT;
 *        REQUIRED(libidmefv2_string_t, *name);
 *        LISTED_OBJECT(alertident_list, libidmefv2_string_t);
 *         OPTIONAL_INT(uint32_t, duration);
 *         OPTIONAL_INT(uint32_t, counter);
 * } TYPE_ID(idmefv2_correlation_alert_t, 46);
 */

typedef struct idmefv2_correlation_alert idmefv2_correlation_alert_t;


int idmefv2_correlation_alert_new(idmefv2_correlation_alert_t **ret);
int idmefv2_correlation_alert_copy(const idmefv2_correlation_alert_t *src, idmefv2_correlation_alert_t *dst);
int idmefv2_correlation_alert_clone(idmefv2_correlation_alert_t *src, idmefv2_correlation_alert_t **dst);
int idmefv2_correlation_alert_compare(const idmefv2_correlation_alert_t *obj1, const idmefv2_correlation_alert_t *obj2);


idmefv2_correlation_alert_t *idmefv2_correlation_alert_ref(idmefv2_correlation_alert_t *correlation_alert);

#ifndef SWIG

int _idmefv2_correlation_alert_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_correlation_alert_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_correlation_alert_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_correlation_alert_destroy(idmefv2_correlation_alert_t *ptr);




libidmefv2_string_t *idmefv2_correlation_alert_get_name(idmefv2_correlation_alert_t *ptr);

void idmefv2_correlation_alert_set_name(idmefv2_correlation_alert_t *ptr, libidmefv2_string_t *name);
int idmefv2_correlation_alert_new_name(idmefv2_correlation_alert_t *ptr, libidmefv2_string_t **ret);


libidmefv2_string_t *idmefv2_correlation_alert_get_next_alertident(idmefv2_correlation_alert_t *correlation_alert, libidmefv2_string_t *libidmefv2_string_cur);
void idmefv2_correlation_alert_set_alertident(idmefv2_correlation_alert_t *ptr, libidmefv2_string_t *object, int pos);
int idmefv2_correlation_alert_new_alertident(idmefv2_correlation_alert_t *ptr, libidmefv2_string_t **ret, int pos);



void idmefv2_correlation_alert_unset_duration(idmefv2_correlation_alert_t *ptr);
uint32_t *idmefv2_correlation_alert_get_duration(idmefv2_correlation_alert_t *ptr);

void idmefv2_correlation_alert_set_duration(idmefv2_correlation_alert_t *ptr, uint32_t duration);
int idmefv2_correlation_alert_new_duration(idmefv2_correlation_alert_t *ptr, uint32_t **ret);



void idmefv2_correlation_alert_unset_counter(idmefv2_correlation_alert_t *ptr);
uint32_t *idmefv2_correlation_alert_get_counter(idmefv2_correlation_alert_t *ptr);

void idmefv2_correlation_alert_set_counter(idmefv2_correlation_alert_t *ptr, uint32_t counter);
int idmefv2_correlation_alert_new_counter(idmefv2_correlation_alert_t *ptr, uint32_t **ret);



        


/*
 * struct {
 *       IDMEFV2_OBJECT;
 *       REFCOUNT;
 *        LISTED_OBJECT(observable_list, idmefv2_observable_t);
 *        LISTED_OBJECT(original_data_list, idmefv2_original_data_t);
 * } TYPE_ID(idmefv2_analysis_data_t, 47);
 */

typedef struct idmefv2_analysis_data idmefv2_analysis_data_t;


int idmefv2_analysis_data_new(idmefv2_analysis_data_t **ret);
int idmefv2_analysis_data_copy(const idmefv2_analysis_data_t *src, idmefv2_analysis_data_t *dst);
int idmefv2_analysis_data_clone(idmefv2_analysis_data_t *src, idmefv2_analysis_data_t **dst);
int idmefv2_analysis_data_compare(const idmefv2_analysis_data_t *obj1, const idmefv2_analysis_data_t *obj2);


idmefv2_analysis_data_t *idmefv2_analysis_data_ref(idmefv2_analysis_data_t *analysis_data);

#ifndef SWIG

int _idmefv2_analysis_data_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_analysis_data_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_analysis_data_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_analysis_data_destroy(idmefv2_analysis_data_t *ptr);



idmefv2_observable_t *idmefv2_analysis_data_get_next_observable(idmefv2_analysis_data_t *analysis_data, idmefv2_observable_t *observable_cur);
void idmefv2_analysis_data_set_observable(idmefv2_analysis_data_t *ptr, idmefv2_observable_t *object, int pos);
int idmefv2_analysis_data_new_observable(idmefv2_analysis_data_t *ptr, idmefv2_observable_t **ret, int pos);


idmefv2_original_data_t *idmefv2_analysis_data_get_next_original_data(idmefv2_analysis_data_t *analysis_data, idmefv2_original_data_t *original_data_cur);
void idmefv2_analysis_data_set_original_data(idmefv2_analysis_data_t *ptr, idmefv2_original_data_t *object, int pos);
int idmefv2_analysis_data_new_original_data(idmefv2_analysis_data_t *ptr, idmefv2_original_data_t **ret, int pos);



        
typedef enum {
        IDMEFV2_CONFIDENCE_RATING_LOW = 0,
        IDMEFV2_CONFIDENCE_RATING_MEDIUM = 1,
        IDMEFV2_CONFIDENCE_RATING_HIGH = 2,
        IDMEFV2_CONFIDENCE_RATING_NUMERIC = 3,
} idmefv2_confidence_rating_t;
        
idmefv2_confidence_rating_t idmefv2_confidence_rating_to_numeric(const char *name);
const char *idmefv2_confidence_rating_to_string(idmefv2_confidence_rating_t val);

        


/*
 * struct {
 *       IDMEFV2_OBJECT;
 *       REFCOUNT;
 *         idmefv2_confidence_rating_t rating;
 * } TYPE_ID(idmefv2_confidence_t, 49);
 */

typedef struct idmefv2_confidence idmefv2_confidence_t;


int idmefv2_confidence_new(idmefv2_confidence_t **ret);
int idmefv2_confidence_copy(const idmefv2_confidence_t *src, idmefv2_confidence_t *dst);
int idmefv2_confidence_clone(idmefv2_confidence_t *src, idmefv2_confidence_t **dst);
int idmefv2_confidence_compare(const idmefv2_confidence_t *obj1, const idmefv2_confidence_t *obj2);


idmefv2_confidence_t *idmefv2_confidence_ref(idmefv2_confidence_t *confidence);

#ifndef SWIG

int _idmefv2_confidence_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_confidence_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_confidence_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_confidence_destroy(idmefv2_confidence_t *ptr);




idmefv2_confidence_rating_t idmefv2_confidence_get_rating(idmefv2_confidence_t *ptr);

void idmefv2_confidence_set_rating(idmefv2_confidence_t *ptr, idmefv2_confidence_rating_t rating);
int idmefv2_confidence_new_rating(idmefv2_confidence_t *ptr, idmefv2_confidence_rating_t **ret);



        
typedef enum {
        IDMEFV2_IMPACT_SEVERITY_INFO = 0,
        IDMEFV2_IMPACT_SEVERITY_LOW = 1,
        IDMEFV2_IMPACT_SEVERITY_MEDIUM = 2,
        IDMEFV2_IMPACT_SEVERITY_HIGH = 3,
} idmefv2_impact_severity_t;
        
idmefv2_impact_severity_t idmefv2_impact_severity_to_numeric(const char *name);
const char *idmefv2_impact_severity_to_string(idmefv2_impact_severity_t val);

        
typedef enum {
        IDMEFV2_IMPACT_COMPLETION_FAILED = 0,
        IDMEFV2_IMPACT_COMPLETION_SUCCEEDED = 1,
} idmefv2_impact_completion_t;
        
idmefv2_impact_completion_t idmefv2_impact_completion_to_numeric(const char *name);
const char *idmefv2_impact_completion_to_string(idmefv2_impact_completion_t val);

        
typedef enum {
        IDMEFV2_IMPACT_AVAILABILITY_TRUE = 0,
        IDMEFV2_IMPACT_AVAILABILITY_FALSE = 1,
        IDMEFV2_IMPACT_AVAILABILITY_UNKNOWN = 2,
} idmefv2_impact_availability_t;
        
idmefv2_impact_availability_t idmefv2_impact_availability_to_numeric(const char *name);
const char *idmefv2_impact_availability_to_string(idmefv2_impact_availability_t val);

        
typedef enum {
        IDMEFV2_IMPACT_INTEGRITY_TRUE = 0,
        IDMEFV2_IMPACT_INTEGRITY_FALSE = 1,
        IDMEFV2_IMPACT_INTEGRITY_UNKNOWN = 2,
} idmefv2_impact_integrity_t;
        
idmefv2_impact_integrity_t idmefv2_impact_integrity_to_numeric(const char *name);
const char *idmefv2_impact_integrity_to_string(idmefv2_impact_integrity_t val);

        
typedef enum {
        IDMEFV2_IMPACT_CONFIDENTIALITY_TRUE = 0,
        IDMEFV2_IMPACT_CONFIDENTIALITY_FALSE = 1,
        IDMEFV2_IMPACT_CONFIDENTIALITY_UNKNOWN = 2,
} idmefv2_impact_confidentiality_t;
        
idmefv2_impact_confidentiality_t idmefv2_impact_confidentiality_to_numeric(const char *name);
const char *idmefv2_impact_confidentiality_to_string(idmefv2_impact_confidentiality_t val);

        


/*
 * struct {
 *       IDMEFV2_OBJECT;
 *       REFCOUNT;
 *         idmefv2_impact_severity_t severity;
 *         idmefv2_impact_completion_t completion;
 *         idmefv2_impact_availability_t availability;
 *         idmefv2_impact_integrity_t integrity;
 *         idmefv2_impact_confidentiality_t confidentiality;
 *         libidmefv2_string_t *description;
 *        LISTED_OBJECT(impact_type_list, idmefv2_impact_type_t);
 * } TYPE_ID(idmefv2_impact_t, 55);
 */

typedef struct idmefv2_impact idmefv2_impact_t;


int idmefv2_impact_new(idmefv2_impact_t **ret);
int idmefv2_impact_copy(const idmefv2_impact_t *src, idmefv2_impact_t *dst);
int idmefv2_impact_clone(idmefv2_impact_t *src, idmefv2_impact_t **dst);
int idmefv2_impact_compare(const idmefv2_impact_t *obj1, const idmefv2_impact_t *obj2);


idmefv2_impact_t *idmefv2_impact_ref(idmefv2_impact_t *impact);

#ifndef SWIG

int _idmefv2_impact_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_impact_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_impact_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_impact_destroy(idmefv2_impact_t *ptr);




idmefv2_impact_severity_t idmefv2_impact_get_severity(idmefv2_impact_t *ptr);

void idmefv2_impact_set_severity(idmefv2_impact_t *ptr, idmefv2_impact_severity_t severity);
int idmefv2_impact_new_severity(idmefv2_impact_t *ptr, idmefv2_impact_severity_t **ret);



idmefv2_impact_completion_t idmefv2_impact_get_completion(idmefv2_impact_t *ptr);

void idmefv2_impact_set_completion(idmefv2_impact_t *ptr, idmefv2_impact_completion_t completion);
int idmefv2_impact_new_completion(idmefv2_impact_t *ptr, idmefv2_impact_completion_t **ret);



idmefv2_impact_availability_t idmefv2_impact_get_availability(idmefv2_impact_t *ptr);

void idmefv2_impact_set_availability(idmefv2_impact_t *ptr, idmefv2_impact_availability_t availability);
int idmefv2_impact_new_availability(idmefv2_impact_t *ptr, idmefv2_impact_availability_t **ret);



idmefv2_impact_integrity_t idmefv2_impact_get_integrity(idmefv2_impact_t *ptr);

void idmefv2_impact_set_integrity(idmefv2_impact_t *ptr, idmefv2_impact_integrity_t integrity);
int idmefv2_impact_new_integrity(idmefv2_impact_t *ptr, idmefv2_impact_integrity_t **ret);



idmefv2_impact_confidentiality_t idmefv2_impact_get_confidentiality(idmefv2_impact_t *ptr);

void idmefv2_impact_set_confidentiality(idmefv2_impact_t *ptr, idmefv2_impact_confidentiality_t confidentiality);
int idmefv2_impact_new_confidentiality(idmefv2_impact_t *ptr, idmefv2_impact_confidentiality_t **ret);



libidmefv2_string_t *idmefv2_impact_get_description(idmefv2_impact_t *ptr);

void idmefv2_impact_set_description(idmefv2_impact_t *ptr, libidmefv2_string_t *description);
int idmefv2_impact_new_description(idmefv2_impact_t *ptr, libidmefv2_string_t **ret);


idmefv2_impact_type_t *idmefv2_impact_get_next_impact_type(idmefv2_impact_t *impact, idmefv2_impact_type_t *impact_type_cur);
void idmefv2_impact_set_impact_type(idmefv2_impact_t *ptr, idmefv2_impact_type_t *object, int pos);
int idmefv2_impact_new_impact_type(idmefv2_impact_t *ptr, idmefv2_impact_type_t **ret, int pos);



        
typedef enum {
        IDMEFV2_RECOMMANDED_ACTION_ACTION_NOTHING = 0,
        IDMEFV2_RECOMMANDED_ACTION_ACTION_CONTACT_SOURCE_SITE = 1,
        IDMEFV2_RECOMMANDED_ACTION_ACTION_CONTACT_TARGET_SITE = 2,
        IDMEFV2_RECOMMANDED_ACTION_ACTION_CONTACT_SENDER = 3,
        IDMEFV2_RECOMMANDED_ACTION_ACTION_INVESTIGATE = 4,
        IDMEFV2_RECOMMANDED_ACTION_ACTION_BLOCK_HOST = 5,
        IDMEFV2_RECOMMANDED_ACTION_ACTION_BLOCK_NETWORK = 6,
        IDMEFV2_RECOMMANDED_ACTION_ACTION_BLOCK_PORT = 7,
        IDMEFV2_RECOMMANDED_ACTION_ACTION_RATE_LIMIT_HOST = 8,
        IDMEFV2_RECOMMANDED_ACTION_ACTION_RATE_LIMIT_NETWORK = 9,
        IDMEFV2_RECOMMANDED_ACTION_ACTION_RATE_LIMIT_PORT = 10,
        IDMEFV2_RECOMMANDED_ACTION_ACTION_REDIRECT_TRAFFIC = 11,
        IDMEFV2_RECOMMANDED_ACTION_ACTION_HONEYPOT = 12,
        IDMEFV2_RECOMMANDED_ACTION_ACTION_UPGRADE_SOFTWARE = 13,
        IDMEFV2_RECOMMANDED_ACTION_ACTION_REBUILD_ASSET = 14,
        IDMEFV2_RECOMMANDED_ACTION_ACTION_HARDEN_ASSET = 15,
        IDMEFV2_RECOMMANDED_ACTION_ACTION_REMEDIATE_OTHER = 16,
        IDMEFV2_RECOMMANDED_ACTION_ACTION_STATUS_TRIAGE = 17,
        IDMEFV2_RECOMMANDED_ACTION_ACTION_STATUS_NEW_INFO = 18,
        IDMEFV2_RECOMMANDED_ACTION_ACTION_WATCH_AND_REPORT = 19,
        IDMEFV2_RECOMMANDED_ACTION_ACTION_TRAINING = 20,
        IDMEFV2_RECOMMANDED_ACTION_ACTION_OTHER = 21,
        IDMEFV2_RECOMMANDED_ACTION_ACTION_EXT_VALUE = 22,
} idmefv2_recommanded_action_action_t;
        
idmefv2_recommanded_action_action_t idmefv2_recommanded_action_action_to_numeric(const char *name);
const char *idmefv2_recommanded_action_action_to_string(idmefv2_recommanded_action_action_t val);

        


/*
 * struct {
 *       IDMEFV2_LINKED_OBJECT;
 *       REFCOUNT;
 *         idmefv2_recommanded_action_action_t action;
 *         OPTIONAL_INT(uint32_t, step);
 * } TYPE_ID(idmefv2_recommanded_action_t, 56);
 */

typedef struct idmefv2_recommanded_action idmefv2_recommanded_action_t;


int idmefv2_recommanded_action_new(idmefv2_recommanded_action_t **ret);
int idmefv2_recommanded_action_copy(const idmefv2_recommanded_action_t *src, idmefv2_recommanded_action_t *dst);
int idmefv2_recommanded_action_clone(idmefv2_recommanded_action_t *src, idmefv2_recommanded_action_t **dst);
int idmefv2_recommanded_action_compare(const idmefv2_recommanded_action_t *obj1, const idmefv2_recommanded_action_t *obj2);


idmefv2_recommanded_action_t *idmefv2_recommanded_action_ref(idmefv2_recommanded_action_t *recommanded_action);

#ifndef SWIG

int _idmefv2_recommanded_action_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_recommanded_action_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_recommanded_action_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_recommanded_action_destroy(idmefv2_recommanded_action_t *ptr);




idmefv2_recommanded_action_action_t idmefv2_recommanded_action_get_action(idmefv2_recommanded_action_t *ptr);

void idmefv2_recommanded_action_set_action(idmefv2_recommanded_action_t *ptr, idmefv2_recommanded_action_action_t action);
int idmefv2_recommanded_action_new_action(idmefv2_recommanded_action_t *ptr, idmefv2_recommanded_action_action_t **ret);



void idmefv2_recommanded_action_unset_step(idmefv2_recommanded_action_t *ptr);
uint32_t *idmefv2_recommanded_action_get_step(idmefv2_recommanded_action_t *ptr);

void idmefv2_recommanded_action_set_step(idmefv2_recommanded_action_t *ptr, uint32_t step);
int idmefv2_recommanded_action_new_step(idmefv2_recommanded_action_t *ptr, uint32_t **ret);



        


/*
 * struct {
 *       IDMEFV2_OBJECT;
 *       REFCOUNT;
 *         idmefv2_impact_t *impact;
 *        LISTED_OBJECT(taken_action_list, idmefv2_taken_action_t);
 *         idmefv2_confidence_t *confidence;
 *        LISTED_OBJECT(recommanded_action_list, idmefv2_recommanded_action_t);
 * } TYPE_ID(idmefv2_assessment_t, 57);
 */

typedef struct idmefv2_assessment idmefv2_assessment_t;


int idmefv2_assessment_new(idmefv2_assessment_t **ret);
int idmefv2_assessment_copy(const idmefv2_assessment_t *src, idmefv2_assessment_t *dst);
int idmefv2_assessment_clone(idmefv2_assessment_t *src, idmefv2_assessment_t **dst);
int idmefv2_assessment_compare(const idmefv2_assessment_t *obj1, const idmefv2_assessment_t *obj2);


idmefv2_assessment_t *idmefv2_assessment_ref(idmefv2_assessment_t *assessment);

#ifndef SWIG

int _idmefv2_assessment_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_assessment_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_assessment_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_assessment_destroy(idmefv2_assessment_t *ptr);




idmefv2_impact_t *idmefv2_assessment_get_impact(idmefv2_assessment_t *ptr);

void idmefv2_assessment_set_impact(idmefv2_assessment_t *ptr, idmefv2_impact_t *impact);
int idmefv2_assessment_new_impact(idmefv2_assessment_t *ptr, idmefv2_impact_t **ret);


idmefv2_taken_action_t *idmefv2_assessment_get_next_taken_action(idmefv2_assessment_t *assessment, idmefv2_taken_action_t *taken_action_cur);
void idmefv2_assessment_set_taken_action(idmefv2_assessment_t *ptr, idmefv2_taken_action_t *object, int pos);
int idmefv2_assessment_new_taken_action(idmefv2_assessment_t *ptr, idmefv2_taken_action_t **ret, int pos);



idmefv2_confidence_t *idmefv2_assessment_get_confidence(idmefv2_assessment_t *ptr);

void idmefv2_assessment_set_confidence(idmefv2_assessment_t *ptr, idmefv2_confidence_t *confidence);
int idmefv2_assessment_new_confidence(idmefv2_assessment_t *ptr, idmefv2_confidence_t **ret);


idmefv2_recommanded_action_t *idmefv2_assessment_get_next_recommanded_action(idmefv2_assessment_t *assessment, idmefv2_recommanded_action_t *recommanded_action_cur);
void idmefv2_assessment_set_recommanded_action(idmefv2_assessment_t *ptr, idmefv2_recommanded_action_t *object, int pos);
int idmefv2_assessment_new_recommanded_action(idmefv2_assessment_t *ptr, idmefv2_recommanded_action_t **ret, int pos);



        


/*
 * struct {
 *       IDMEFV2_OBJECT;
 *       REFCOUNT;
 *         libidmefv2_string_t *ident;
 *        REQUIRED(libidmefv2_string_t, *text);
 *        LISTED_OBJECT(reference_list, idmefv2_reference_t);
 * } TYPE_ID(idmefv2_classification_t, 58);
 */

typedef struct idmefv2_classification idmefv2_classification_t;


int idmefv2_classification_new(idmefv2_classification_t **ret);
int idmefv2_classification_copy(const idmefv2_classification_t *src, idmefv2_classification_t *dst);
int idmefv2_classification_clone(idmefv2_classification_t *src, idmefv2_classification_t **dst);
int idmefv2_classification_compare(const idmefv2_classification_t *obj1, const idmefv2_classification_t *obj2);


idmefv2_classification_t *idmefv2_classification_ref(idmefv2_classification_t *classification);

#ifndef SWIG

int _idmefv2_classification_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_classification_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_classification_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_classification_destroy(idmefv2_classification_t *ptr);




libidmefv2_string_t *idmefv2_classification_get_ident(idmefv2_classification_t *ptr);

void idmefv2_classification_set_ident(idmefv2_classification_t *ptr, libidmefv2_string_t *ident);
int idmefv2_classification_new_ident(idmefv2_classification_t *ptr, libidmefv2_string_t **ret);



libidmefv2_string_t *idmefv2_classification_get_text(idmefv2_classification_t *ptr);

void idmefv2_classification_set_text(idmefv2_classification_t *ptr, libidmefv2_string_t *text);
int idmefv2_classification_new_text(idmefv2_classification_t *ptr, libidmefv2_string_t **ret);


idmefv2_reference_t *idmefv2_classification_get_next_reference(idmefv2_classification_t *classification, idmefv2_reference_t *reference_cur);
void idmefv2_classification_set_reference(idmefv2_classification_t *ptr, idmefv2_reference_t *object, int pos);
int idmefv2_classification_new_reference(idmefv2_classification_t *ptr, idmefv2_reference_t **ret, int pos);



        


/*
 * struct {
 *       IDMEFV2_OBJECT;
 *       REFCOUNT;
 *        REQUIRED(libidmefv2_string_t, *messageid);
 *         idmefv2_analyzer_t *analyzer;
 *        REQUIRED(idmefv2_time_t, *create_time);
 *         OPTIONAL_INT(uint32_t, heartbeat_interval);
 *        KEYLISTED_OBJECT(additional_data_list, idmefv2_additional_data_t);
 * } TYPE_ID(idmefv2_heartbeat_t, 59);
 */

typedef struct idmefv2_heartbeat idmefv2_heartbeat_t;


int idmefv2_heartbeat_new(idmefv2_heartbeat_t **ret);
int idmefv2_heartbeat_copy(const idmefv2_heartbeat_t *src, idmefv2_heartbeat_t *dst);
int idmefv2_heartbeat_clone(idmefv2_heartbeat_t *src, idmefv2_heartbeat_t **dst);
int idmefv2_heartbeat_compare(const idmefv2_heartbeat_t *obj1, const idmefv2_heartbeat_t *obj2);


idmefv2_heartbeat_t *idmefv2_heartbeat_ref(idmefv2_heartbeat_t *heartbeat);

#ifndef SWIG

int _idmefv2_heartbeat_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_heartbeat_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_heartbeat_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_heartbeat_destroy(idmefv2_heartbeat_t *ptr);




libidmefv2_string_t *idmefv2_heartbeat_get_messageid(idmefv2_heartbeat_t *ptr);

void idmefv2_heartbeat_set_messageid(idmefv2_heartbeat_t *ptr, libidmefv2_string_t *messageid);
int idmefv2_heartbeat_new_messageid(idmefv2_heartbeat_t *ptr, libidmefv2_string_t **ret);



idmefv2_analyzer_t *idmefv2_heartbeat_get_analyzer(idmefv2_heartbeat_t *ptr);

void idmefv2_heartbeat_set_analyzer(idmefv2_heartbeat_t *ptr, idmefv2_analyzer_t *analyzer);
int idmefv2_heartbeat_new_analyzer(idmefv2_heartbeat_t *ptr, idmefv2_analyzer_t **ret);



idmefv2_time_t *idmefv2_heartbeat_get_create_time(idmefv2_heartbeat_t *ptr);

void idmefv2_heartbeat_set_create_time(idmefv2_heartbeat_t *ptr, idmefv2_time_t *create_time);
int idmefv2_heartbeat_new_create_time(idmefv2_heartbeat_t *ptr, idmefv2_time_t **ret);



void idmefv2_heartbeat_unset_heartbeat_interval(idmefv2_heartbeat_t *ptr);
uint32_t *idmefv2_heartbeat_get_heartbeat_interval(idmefv2_heartbeat_t *ptr);

void idmefv2_heartbeat_set_heartbeat_interval(idmefv2_heartbeat_t *ptr, uint32_t heartbeat_interval);
int idmefv2_heartbeat_new_heartbeat_interval(idmefv2_heartbeat_t *ptr, uint32_t **ret);


idmefv2_additional_data_t *idmefv2_heartbeat_get_next_additional_data(idmefv2_heartbeat_t *heartbeat, idmefv2_additional_data_t *additional_data_cur);
void idmefv2_heartbeat_set_additional_data(idmefv2_heartbeat_t *ptr, idmefv2_additional_data_t *object, int pos);
int idmefv2_heartbeat_new_additional_data(idmefv2_heartbeat_t *ptr, idmefv2_additional_data_t **ret, int pos);



        
typedef enum {
        IDMEFV2_ALERT_TYPE_ERROR = -1,
        IDMEFV2_ALERT_TYPE_DEFAULT = 0,
        IDMEFV2_ALERT_TYPE_CORRELATION = 1,
} idmefv2_alert_type_t;
        
idmefv2_alert_type_t idmefv2_alert_type_to_numeric(const char *name);
const char *idmefv2_alert_type_to_string(idmefv2_alert_type_t val);

        


/*
 * struct {
 *       IDMEFV2_OBJECT;
 *       REFCOUNT;
 *        REQUIRED(libidmefv2_string_t, *messageid);
 *        REQUIRED(libidmefv2_string_t, *analyzerhash);
 *        LISTED_OBJECT(analyzer_list, idmefv2_analyzer_t);
 *        REQUIRED(idmefv2_time_t, *create_time);
 *        REQUIRED(idmefv2_classification_t, *classification);
 *         idmefv2_time_t *detect_time;
 *         idmefv2_analysis_data_t *analysis_data;
 *        LISTED_OBJECT(source_list, idmefv2_source_t);
 *        LISTED_OBJECT(target_list, idmefv2_target_t);
 *         idmefv2_assessment_t *assessment;
 *        KEYLISTED_OBJECT(additional_data_list, idmefv2_additional_data_t);
 *         UNION(idmefv2_alert_type_t, type) {
                    UNION_MEMBER(IDMEFV2_ALERT_TYPE_CORRELATION, idmefv2_correlation_alert_t, *correlation_alert);
        } detail;
 * } TYPE_ID(idmefv2_alert_t, 63);
 */

typedef struct idmefv2_alert idmefv2_alert_t;


int idmefv2_alert_new(idmefv2_alert_t **ret);
int idmefv2_alert_copy(const idmefv2_alert_t *src, idmefv2_alert_t *dst);
int idmefv2_alert_clone(idmefv2_alert_t *src, idmefv2_alert_t **dst);
int idmefv2_alert_compare(const idmefv2_alert_t *obj1, const idmefv2_alert_t *obj2);


idmefv2_alert_t *idmefv2_alert_ref(idmefv2_alert_t *alert);

#ifndef SWIG

int _idmefv2_alert_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_alert_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_alert_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_alert_destroy(idmefv2_alert_t *ptr);




libidmefv2_string_t *idmefv2_alert_get_messageid(idmefv2_alert_t *ptr);

void idmefv2_alert_set_messageid(idmefv2_alert_t *ptr, libidmefv2_string_t *messageid);
int idmefv2_alert_new_messageid(idmefv2_alert_t *ptr, libidmefv2_string_t **ret);



libidmefv2_string_t *idmefv2_alert_get_analyzerhash(idmefv2_alert_t *ptr);

void idmefv2_alert_set_analyzerhash(idmefv2_alert_t *ptr, libidmefv2_string_t *analyzerhash);
int idmefv2_alert_new_analyzerhash(idmefv2_alert_t *ptr, libidmefv2_string_t **ret);


idmefv2_analyzer_t *idmefv2_alert_get_next_analyzer(idmefv2_alert_t *alert, idmefv2_analyzer_t *analyzer_cur);
void idmefv2_alert_set_analyzer(idmefv2_alert_t *ptr, idmefv2_analyzer_t *object, int pos);
int idmefv2_alert_new_analyzer(idmefv2_alert_t *ptr, idmefv2_analyzer_t **ret, int pos);



idmefv2_time_t *idmefv2_alert_get_create_time(idmefv2_alert_t *ptr);

void idmefv2_alert_set_create_time(idmefv2_alert_t *ptr, idmefv2_time_t *create_time);
int idmefv2_alert_new_create_time(idmefv2_alert_t *ptr, idmefv2_time_t **ret);



idmefv2_classification_t *idmefv2_alert_get_classification(idmefv2_alert_t *ptr);

void idmefv2_alert_set_classification(idmefv2_alert_t *ptr, idmefv2_classification_t *classification);
int idmefv2_alert_new_classification(idmefv2_alert_t *ptr, idmefv2_classification_t **ret);



idmefv2_time_t *idmefv2_alert_get_detect_time(idmefv2_alert_t *ptr);

void idmefv2_alert_set_detect_time(idmefv2_alert_t *ptr, idmefv2_time_t *detect_time);
int idmefv2_alert_new_detect_time(idmefv2_alert_t *ptr, idmefv2_time_t **ret);



idmefv2_analysis_data_t *idmefv2_alert_get_analysis_data(idmefv2_alert_t *ptr);

void idmefv2_alert_set_analysis_data(idmefv2_alert_t *ptr, idmefv2_analysis_data_t *analysis_data);
int idmefv2_alert_new_analysis_data(idmefv2_alert_t *ptr, idmefv2_analysis_data_t **ret);


idmefv2_source_t *idmefv2_alert_get_next_source(idmefv2_alert_t *alert, idmefv2_source_t *source_cur);
void idmefv2_alert_set_source(idmefv2_alert_t *ptr, idmefv2_source_t *object, int pos);
int idmefv2_alert_new_source(idmefv2_alert_t *ptr, idmefv2_source_t **ret, int pos);


idmefv2_target_t *idmefv2_alert_get_next_target(idmefv2_alert_t *alert, idmefv2_target_t *target_cur);
void idmefv2_alert_set_target(idmefv2_alert_t *ptr, idmefv2_target_t *object, int pos);
int idmefv2_alert_new_target(idmefv2_alert_t *ptr, idmefv2_target_t **ret, int pos);



idmefv2_assessment_t *idmefv2_alert_get_assessment(idmefv2_alert_t *ptr);

void idmefv2_alert_set_assessment(idmefv2_alert_t *ptr, idmefv2_assessment_t *assessment);
int idmefv2_alert_new_assessment(idmefv2_alert_t *ptr, idmefv2_assessment_t **ret);


idmefv2_additional_data_t *idmefv2_alert_get_next_additional_data(idmefv2_alert_t *alert, idmefv2_additional_data_t *additional_data_cur);
void idmefv2_alert_set_additional_data(idmefv2_alert_t *ptr, idmefv2_additional_data_t *object, int pos);
int idmefv2_alert_new_additional_data(idmefv2_alert_t *ptr, idmefv2_additional_data_t **ret, int pos);


idmefv2_alert_type_t idmefv2_alert_get_type(idmefv2_alert_t *ptr);


idmefv2_correlation_alert_t *idmefv2_alert_get_correlation_alert(idmefv2_alert_t *ptr);

void idmefv2_alert_set_correlation_alert(idmefv2_alert_t *ptr, idmefv2_correlation_alert_t *correlation_alert);
int idmefv2_alert_new_correlation_alert(idmefv2_alert_t *ptr, idmefv2_correlation_alert_t **ret);




        
typedef enum {
        IDMEFV2_MESSAGE_TYPE_ERROR = -1,
        IDMEFV2_MESSAGE_TYPE_DEFAULT = 0,
        IDMEFV2_MESSAGE_TYPE_ALERT = 1,
        IDMEFV2_MESSAGE_TYPE_HEARTBEAT = 2,
} idmefv2_message_type_t;
        
idmefv2_message_type_t idmefv2_message_type_to_numeric(const char *name);
const char *idmefv2_message_type_to_string(idmefv2_message_type_t val);

        


/*
 * struct {
 *       IDMEFV2_OBJECT;
 *       REFCOUNT;
 *        REQUIRED(libidmefv2_string_t, *version);
 *         UNION(idmefv2_message_type_t, type) {
                    UNION_MEMBER(IDMEFV2_MESSAGE_TYPE_ALERT, idmefv2_alert_t, *alert);
                    UNION_MEMBER(IDMEFV2_MESSAGE_TYPE_HEARTBEAT, idmefv2_heartbeat_t, *heartbeat);
        } message;
 * } TYPE_ID(idmefv2_message_t, 65);
 */

typedef struct idmefv2_message idmefv2_message_t;


int idmefv2_message_new(idmefv2_message_t **ret);
int idmefv2_message_copy(const idmefv2_message_t *src, idmefv2_message_t *dst);
int idmefv2_message_clone(idmefv2_message_t *src, idmefv2_message_t **dst);
int idmefv2_message_compare(const idmefv2_message_t *obj1, const idmefv2_message_t *obj2);


idmefv2_message_t *idmefv2_message_ref(idmefv2_message_t *message);

#ifndef SWIG

int _idmefv2_message_get_child(void *p, idmefv2_class_child_id_t child, void **childptr);


int _idmefv2_message_new_child(void *p, idmefv2_class_child_id_t child, int n, void **ret);


int _idmefv2_message_destroy_child(void *p, idmefv2_class_child_id_t child, int n);

#endif

void idmefv2_message_destroy(idmefv2_message_t *ptr);




libidmefv2_string_t *idmefv2_message_get_version(idmefv2_message_t *ptr);

void idmefv2_message_set_version(idmefv2_message_t *ptr, libidmefv2_string_t *version);
int idmefv2_message_new_version(idmefv2_message_t *ptr, libidmefv2_string_t **ret);


idmefv2_message_type_t idmefv2_message_get_type(idmefv2_message_t *ptr);


idmefv2_alert_t *idmefv2_message_get_alert(idmefv2_message_t *ptr);

void idmefv2_message_set_alert(idmefv2_message_t *ptr, idmefv2_alert_t *alert);
int idmefv2_message_new_alert(idmefv2_message_t *ptr, idmefv2_alert_t **ret);



idmefv2_heartbeat_t *idmefv2_message_get_heartbeat(idmefv2_message_t *ptr);

void idmefv2_message_set_heartbeat(idmefv2_message_t *ptr, idmefv2_heartbeat_t *heartbeat);
int idmefv2_message_new_heartbeat(idmefv2_message_t *ptr, idmefv2_heartbeat_t **ret);







int _idmefv2_additional_data_type_is_set(idmefv2_additional_data_t *ad);

#ifdef __cplusplus
  }
#endif

#define IDMEFV2_CLASS_ID_ADDRESS_TRANSLATION 4
#define IDMEFV2_CLASS_ID_ADDRESS_CATEGORY 3
#define IDMEFV2_CLASS_ID_ADDRESS 5
#define IDMEFV2_CLASS_ID_USER_ID_CATEGORY 6
#define IDMEFV2_CLASS_ID_USER_ID 7
#define IDMEFV2_CLASS_ID_NODE_NAME_CATEGORY 8
#define IDMEFV2_CLASS_ID_NODE_NAME 9
#define IDMEFV2_CLASS_ID_LOCATION 10
#define IDMEFV2_CLASS_ID_INTERFACE_CATEGORY 11
#define IDMEFV2_CLASS_ID_INTERFACE 12
#define IDMEFV2_CLASS_ID_FILE_ACCESS_PERMISSION 13
#define IDMEFV2_CLASS_ID_FILE_ACCESS 14
#define IDMEFV2_CLASS_ID_INODE 15
#define IDMEFV2_CLASS_ID_CHECKSUM_ALGORITHM 16
#define IDMEFV2_CLASS_ID_CHECKSUM 17
#define IDMEFV2_CLASS_ID_STREAM_OFFSETUNIT 18
#define IDMEFV2_CLASS_ID_STREAM 19
#define IDMEFV2_CLASS_ID_FILE_CATEGORY 20
#define IDMEFV2_CLASS_ID_FILE 21
#define IDMEFV2_CLASS_ID_LINKAGE_CATEGORY 22
#define IDMEFV2_CLASS_ID_LINKAGE 23
#define IDMEFV2_CLASS_ID_CONTAINER 24
#define IDMEFV2_CLASS_ID_PROCESS 25
#define IDMEFV2_CLASS_ID_SERVICE 26
#define IDMEFV2_CLASS_ID_NODE 27
#define IDMEFV2_CLASS_ID_USER_CATEGORY 28
#define IDMEFV2_CLASS_ID_USER 29
#define IDMEFV2_CLASS_ID_IMPACT_TYPE_ORIGIN 30
#define IDMEFV2_CLASS_ID_IMPACT_TYPE 31
#define IDMEFV2_CLASS_ID_SOURCE_SPOOFED 32
#define IDMEFV2_CLASS_ID_SOURCE 33
#define IDMEFV2_CLASS_ID_TARGET_DECOY 34
#define IDMEFV2_CLASS_ID_TARGET 35
#define IDMEFV2_CLASS_ID_ORIGINAL_DATA 36
#define IDMEFV2_CLASS_ID_OBSERVABLE_ORIGIN 37
#define IDMEFV2_CLASS_ID_OBSERVABLE 38
#define IDMEFV2_CLASS_ID_TAKEN_ACTION_CATEGORY 39
#define IDMEFV2_CLASS_ID_TAKEN_ACTION 40
#define IDMEFV2_CLASS_ID_REFERENCE_ORIGIN 41
#define IDMEFV2_CLASS_ID_REFERENCE 42
#define IDMEFV2_CLASS_ID_ANALYZER_CLASS 66
#define IDMEFV2_CLASS_ID_ANALYZER_ANALYZERACTION 67
#define IDMEFV2_CLASS_ID_ANALYZER 43
#define IDMEFV2_CLASS_ID_ADDITIONAL_DATA_TYPE 44
#define IDMEFV2_CLASS_ID_ADDITIONAL_DATA 45
#define IDMEFV2_CLASS_ID_CORRELATION_ALERT 46
#define IDMEFV2_CLASS_ID_ANALYSIS_DATA 47
#define IDMEFV2_CLASS_ID_CONFIDENCE_RATING 48
#define IDMEFV2_CLASS_ID_CONFIDENCE 49
#define IDMEFV2_CLASS_ID_IMPACT_SEVERITY 51
#define IDMEFV2_CLASS_ID_IMPACT_COMPLETION 50
#define IDMEFV2_CLASS_ID_IMPACT_AVAILABILITY 52
#define IDMEFV2_CLASS_ID_IMPACT_INTEGRITY 53
#define IDMEFV2_CLASS_ID_IMPACT_CONFIDENTIALITY 54
#define IDMEFV2_CLASS_ID_IMPACT 55
#define IDMEFV2_CLASS_ID_RECOMMANDED_ACTION_ACTION 68
#define IDMEFV2_CLASS_ID_RECOMMANDED_ACTION 56
#define IDMEFV2_CLASS_ID_ASSESSMENT 57
#define IDMEFV2_CLASS_ID_CLASSIFICATION 58
#define IDMEFV2_CLASS_ID_HEARTBEAT 59
#define IDMEFV2_CLASS_ID_ALERT_TYPE 62
#define IDMEFV2_CLASS_ID_ALERT 63
#define IDMEFV2_CLASS_ID_MESSAGE_TYPE 64
#define IDMEFV2_CLASS_ID_MESSAGE 65
#endif /*_LIBIDMEFV2_IDMEFV2_TREE_WRAP */


