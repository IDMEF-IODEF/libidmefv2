















/*****
*
* Copyright (C) 2008-2016 CS-SI. All Rights Reserved.
* Author: Yoann Vandoorselaere <yoann.v@prelude-ids.com>
*
* This file is part of the Libidmefv2 library.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2, or (at your option)
* any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License for more details.
*
* You should have received a copy of the GNU General Public License along
* with this program; if not, write to the Free Software Foundation, Inc.,
* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*
*****/

/*
 * This file was automatically generated by our generator, version 1
 *
 * Do not make changes to this file unless you know what you are doing.
 * modify the template interface file instead.
 * IDMEFV2 version : Not released yet
 * Template file: generate-tree-wrap.hxx.mako
 *
 */

#ifndef _LIBIDMEFV2_IDMEFV2_TREE_WRAP_HXX
#define _LIBIDMEFV2_IDMEFV2_TREE_WRAP_HXX

#include <list>
#include <string>

#include "libidmefv2.h"
#include "idmefv2-time.hxx"

using namespace std;


class IDMEFV2idmefv2_data {
};

        
    

class IDMEFV2address {
    protected:
        idmefv2_address_t *_priv;
        idmefv2_address_t *_priv;

    public:

    
        IDMEFV2address();
        IDMEFV2address(idmefv2_address_t *ptr);
        IDMEFV2address *copy(IDMEFV2address *dst);
        IDMEFV2address *clone();
        int compare(IDMEFV2address *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        std::string *get_ident();
        void set_ident(std::string *ident);
        std::string *new_ident();





        idmefv2_address_translation_t get_translation();
        void set_translation(idmefv2_address_translation_t translation);
        idmefv2_address_translation_t *new_translation();





        idmefv2_address_category_t get_category();
        void set_category(idmefv2_address_category_t category);
        idmefv2_address_category_t *new_category();





        std::string *get_vlan_name();
        void set_vlan_name(std::string *vlan_name);
        std::string *new_vlan_name();




        void unset_vlan_num();

        uint32_t *get_vlan_num();
        void set_vlan_num(uint32_t vlan_num);
        uint32_t *new_vlan_num();





        std::string *get_address();
        void set_address(std::string *address);
        std::string *new_address();





        std::string *get_netmask();
        void set_netmask(std::string *netmask);
        std::string *new_netmask();



};

        
    

class IDMEFV2user_id {
    protected:
        idmefv2_user_id_t *_priv;
        idmefv2_user_id_t *_priv;

    public:

    
        IDMEFV2user_id();
        IDMEFV2user_id(idmefv2_user_id_t *ptr);
        IDMEFV2user_id *copy(IDMEFV2user_id *dst);
        IDMEFV2user_id *clone();
        int compare(IDMEFV2user_id *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        std::string *get_ident();
        void set_ident(std::string *ident);
        std::string *new_ident();





        idmefv2_user_id_category_t get_category();
        void set_category(idmefv2_user_id_category_t category);
        idmefv2_user_id_category_t *new_category();





        std::string *get_tty();
        void set_tty(std::string *tty);
        std::string *new_tty();





        std::string *get_name();
        void set_name(std::string *name);
        std::string *new_name();




        void unset_number();

        uint32_t *get_number();
        void set_number(uint32_t number);
        uint32_t *new_number();



};

        
    

class IDMEFV2node_name {
    protected:
        idmefv2_node_name_t *_priv;
        idmefv2_node_name_t *_priv;

    public:

    
        IDMEFV2node_name();
        IDMEFV2node_name(idmefv2_node_name_t *ptr);
        IDMEFV2node_name *copy(IDMEFV2node_name *dst);
        IDMEFV2node_name *clone();
        int compare(IDMEFV2node_name *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        idmefv2_node_name_category_t get_category();
        void set_category(idmefv2_node_name_category_t category);
        idmefv2_node_name_category_t *new_category();





        std::string *get_name();
        void set_name(std::string *name);
        std::string *new_name();



};

        
    

class IDMEFV2location {
    protected:
        idmefv2_location_t *_priv;
        idmefv2_location_t *_priv;

    public:

    
        IDMEFV2location();
        IDMEFV2location(idmefv2_location_t *ptr);
        IDMEFV2location *copy(IDMEFV2location *dst);
        IDMEFV2location *clone();
        int compare(IDMEFV2location *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        std::string *get_name();
        void set_name(std::string *name);
        std::string *new_name();




        void unset_latitude();

        float *get_latitude();
        void set_latitude(float latitude);
        float *new_latitude();




        void unset_longitude();

        float *get_longitude();
        void set_longitude(float longitude);
        float *new_longitude();




        void unset_altitude();

        float *get_altitude();
        void set_altitude(float altitude);
        float *new_altitude();





        std::string *get_country();
        void set_country(std::string *country);
        std::string *new_country();





        std::string *get_city();
        void set_city(std::string *city);
        std::string *new_city();





        std::string *get_postcode();
        void set_postcode(std::string *postcode);
        std::string *new_postcode();



};

        
    

class IDMEFV2interface {
private:

        std::list<IDMEFV2address *> address;
    protected:
        idmefv2_interface_t *_priv;
        idmefv2_interface_t *_priv;

    public:

    
        IDMEFV2interface();
        IDMEFV2interface(idmefv2_interface_t *ptr);
        IDMEFV2interface *copy(IDMEFV2interface *dst);
        IDMEFV2interface *clone();
        int compare(IDMEFV2interface *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        std::string *get_name();
        void set_name(std::string *name);
        std::string *new_name();





        idmefv2_interface_category_t get_category();
        void set_category(idmefv2_interface_category_t category);
        idmefv2_interface_category_t *new_category();





        std::string *get_meaning();
        void set_meaning(std::string *meaning);
        std::string *new_meaning();





        std::list<IDMEFV2address *> *get_address_list();
        void set_address(IDMEFV2address *object, int pos);
        IDMEFV2address *new_address(int pos);


};

        
    

class IDMEFV2file_access {
private:

        IDMEFV2user_id * user_id;
    protected:
        idmefv2_file_access_t *_priv;
        idmefv2_file_access_t *_priv;

    public:

    
        IDMEFV2file_access();
        IDMEFV2file_access(idmefv2_file_access_t *ptr);
        IDMEFV2file_access *copy(IDMEFV2file_access *dst);
        IDMEFV2file_access *clone();
        int compare(IDMEFV2file_access *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        idmefv2_user_id_t *get_user_id();
        void set_user_id(idmefv2_user_id_t *user_id);
        idmefv2_user_id_t *new_user_id();





        idmefv2_file_access_permission_t get_permission();
        void set_permission(idmefv2_file_access_permission_t permission);
        idmefv2_file_access_permission_t *new_permission();



};

        
    

class IDMEFV2inode {
    protected:
        idmefv2_inode_t *_priv;
        idmefv2_inode_t *_priv;

    public:

    
        IDMEFV2inode();
        IDMEFV2inode(idmefv2_inode_t *ptr);
        IDMEFV2inode *copy(IDMEFV2inode *dst);
        IDMEFV2inode *clone();
        int compare(IDMEFV2inode *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    


        void unset_number();

        uint32_t *get_number();
        void set_number(uint32_t number);
        uint32_t *new_number();




        void unset_major_device();

        uint32_t *get_major_device();
        void set_major_device(uint32_t major_device);
        uint32_t *new_major_device();




        void unset_minor_device();

        uint32_t *get_minor_device();
        void set_minor_device(uint32_t minor_device);
        uint32_t *new_minor_device();




        void unset_c_major_device();

        uint32_t *get_c_major_device();
        void set_c_major_device(uint32_t c_major_device);
        uint32_t *new_c_major_device();




        void unset_c_minor_device();

        uint32_t *get_c_minor_device();
        void set_c_minor_device(uint32_t c_minor_device);
        uint32_t *new_c_minor_device();





        IDMEFV2idmefv2_time *get_change_time();
        void set_change_time(IDMEFV2idmefv2_time *change_time);
        IDMEFV2idmefv2_time *new_change_time();



};

        
    

class IDMEFV2checksum {
    protected:
        idmefv2_checksum_t *_priv;
        idmefv2_checksum_t *_priv;

    public:

    
        IDMEFV2checksum();
        IDMEFV2checksum(idmefv2_checksum_t *ptr);
        IDMEFV2checksum *copy(IDMEFV2checksum *dst);
        IDMEFV2checksum *clone();
        int compare(IDMEFV2checksum *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        std::string *get_value();
        void set_value(std::string *value);
        std::string *new_value();





        std::string *get_key();
        void set_key(std::string *key);
        std::string *new_key();





        idmefv2_checksum_algorithm_t get_algorithm();
        void set_algorithm(idmefv2_checksum_algorithm_t algorithm);
        idmefv2_checksum_algorithm_t *new_algorithm();



};

        
typedef struct idmefv2_linkage idmefv2_linkage_t;

        
typedef struct idmefv2_container idmefv2_container_t;

        
    

class IDMEFV2stream {
    protected:
        idmefv2_stream_t *_priv;
        idmefv2_stream_t *_priv;

    public:

    
        IDMEFV2stream();
        IDMEFV2stream(idmefv2_stream_t *ptr);
        IDMEFV2stream *copy(IDMEFV2stream *dst);
        IDMEFV2stream *clone();
        int compare(IDMEFV2stream *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        idmefv2_stream_offsetunit_t get_offsetunit();
        void set_offsetunit(idmefv2_stream_offsetunit_t offsetunit);
        idmefv2_stream_offsetunit_t *new_offsetunit();




        void unset_offset();

        uint32_t *get_offset();
        void set_offset(uint32_t offset);
        uint32_t *new_offset();



};

        
    

class IDMEFV2file {
private:

        std::list<IDMEFV2file_access *> file_access;

        std::list<IDMEFV2linkage *> linkage;

        IDMEFV2inode * inode;

        std::list<IDMEFV2checksum *> checksum;

        IDMEFV2container * container;

        IDMEFV2stream * stream;
    protected:
        idmefv2_file_t *_priv;
        idmefv2_file_t *_priv;

    public:

    
        IDMEFV2file();
        IDMEFV2file(idmefv2_file_t *ptr);
        IDMEFV2file *copy(IDMEFV2file *dst);
        IDMEFV2file *clone();
        int compare(IDMEFV2file *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        std::string *get_ident();
        void set_ident(std::string *ident);
        std::string *new_ident();





        std::string *get_name();
        void set_name(std::string *name);
        std::string *new_name();





        std::string *get_path();
        void set_path(std::string *path);
        std::string *new_path();





        IDMEFV2idmefv2_time *get_create_time();
        void set_create_time(IDMEFV2idmefv2_time *create_time);
        IDMEFV2idmefv2_time *new_create_time();





        IDMEFV2idmefv2_time *get_modify_time();
        void set_modify_time(IDMEFV2idmefv2_time *modify_time);
        IDMEFV2idmefv2_time *new_modify_time();





        IDMEFV2idmefv2_time *get_access_time();
        void set_access_time(IDMEFV2idmefv2_time *access_time);
        IDMEFV2idmefv2_time *new_access_time();




        void unset_data_size();

        uint64_t *get_data_size();
        void set_data_size(uint64_t data_size);
        uint64_t *new_data_size();




        void unset_disk_size();

        uint64_t *get_disk_size();
        void set_disk_size(uint64_t disk_size);
        uint64_t *new_disk_size();





        std::list<IDMEFV2file_access *> *get_file_access_list();
        void set_file_access(IDMEFV2file_access *object, int pos);
        IDMEFV2file_access *new_file_access(int pos);




        std::list<IDMEFV2linkage *> *get_linkage_list();
        void set_linkage(IDMEFV2linkage *object, int pos);
        IDMEFV2linkage *new_linkage(int pos);




        idmefv2_inode_t *get_inode();
        void set_inode(idmefv2_inode_t *inode);
        idmefv2_inode_t *new_inode();





        std::list<IDMEFV2checksum *> *get_checksum_list();
        void set_checksum(IDMEFV2checksum *object, int pos);
        IDMEFV2checksum *new_checksum(int pos);




        idmefv2_file_category_t get_category();
        void set_category(idmefv2_file_category_t category);
        idmefv2_file_category_t *new_category();





        std::string *get_file_type();
        void set_file_type(std::string *file_type);
        std::string *new_file_type();





        idmefv2_container_t *get_container();
        void set_container(idmefv2_container_t *container);
        idmefv2_container_t *new_container();





        idmefv2_stream_t *get_stream();
        void set_stream(idmefv2_stream_t *stream);
        idmefv2_stream_t *new_stream();



};

        
    

class IDMEFV2linkage {
private:

        IDMEFV2file * file;
    protected:
        idmefv2_linkage_t *_priv;
        idmefv2_linkage_t *_priv;

    public:

    
        IDMEFV2linkage();
        IDMEFV2linkage(idmefv2_linkage_t *ptr);
        IDMEFV2linkage *copy(IDMEFV2linkage *dst);
        IDMEFV2linkage *clone();
        int compare(IDMEFV2linkage *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        idmefv2_linkage_category_t get_category();
        void set_category(idmefv2_linkage_category_t category);
        idmefv2_linkage_category_t *new_category();





        std::string *get_name();
        void set_name(std::string *name);
        std::string *new_name();





        std::string *get_path();
        void set_path(std::string *path);
        std::string *new_path();





        idmefv2_file_t *get_file();
        void set_file(idmefv2_file_t *file);
        idmefv2_file_t *new_file();



};

        
    

class IDMEFV2container {
private:

        IDMEFV2file * file;
    protected:
        idmefv2_container_t *_priv;
        idmefv2_container_t *_priv;

    public:

    
        IDMEFV2container();
        IDMEFV2container(idmefv2_container_t *ptr);
        IDMEFV2container *copy(IDMEFV2container *dst);
        IDMEFV2container *clone();
        int compare(IDMEFV2container *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        std::string *get_name();
        void set_name(std::string *name);
        std::string *new_name();





        std::string *get_path();
        void set_path(std::string *path);
        std::string *new_path();





        idmefv2_file_t *get_file();
        void set_file(idmefv2_file_t *file);
        idmefv2_file_t *new_file();



};

        
    

class IDMEFV2process {
    protected:
        idmefv2_process_t *_priv;
        idmefv2_process_t *_priv;

    public:

    
        IDMEFV2process();
        IDMEFV2process(idmefv2_process_t *ptr);
        IDMEFV2process *copy(IDMEFV2process *dst);
        IDMEFV2process *clone();
        int compare(IDMEFV2process *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        std::string *get_ident();
        void set_ident(std::string *ident);
        std::string *new_ident();





        std::string *get_name();
        void set_name(std::string *name);
        std::string *new_name();




        void unset_pid();

        uint32_t *get_pid();
        void set_pid(uint32_t pid);
        uint32_t *new_pid();





        std::string *get_path();
        void set_path(std::string *path);
        std::string *new_path();





        std::list<std::string *> *get_arg_list();
        void set_arg(std::string *object, int pos);
        std::string *new_arg(int pos);




        std::list<std::string *> *get_env_list();
        void set_env(std::string *object, int pos);
        std::string *new_env(int pos);



        void unset_tid();

        uint32_t *get_tid();
        void set_tid(uint32_t tid);
        uint32_t *new_tid();



};

        
    

class IDMEFV2service {
    protected:
        idmefv2_service_t *_priv;
        idmefv2_service_t *_priv;

    public:

    
        IDMEFV2service();
        IDMEFV2service(idmefv2_service_t *ptr);
        IDMEFV2service *copy(IDMEFV2service *dst);
        IDMEFV2service *clone();
        int compare(IDMEFV2service *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        std::string *get_ident();
        void set_ident(std::string *ident);
        std::string *new_ident();




        void unset_iana_protocol_number();

        uint32_t *get_iana_protocol_number();
        void set_iana_protocol_number(uint32_t iana_protocol_number);
        uint32_t *new_iana_protocol_number();





        std::string *get_iana_protocol_name();
        void set_iana_protocol_name(std::string *iana_protocol_name);
        std::string *new_iana_protocol_name();





        std::string *get_name();
        void set_name(std::string *name);
        std::string *new_name();




        void unset_port();

        uint32_t *get_port();
        void set_port(uint32_t port);
        uint32_t *new_port();





        std::string *get_portlist();
        void set_portlist(std::string *portlist);
        std::string *new_portlist();





        std::string *get_protocol();
        void set_protocol(std::string *protocol);
        std::string *new_protocol();



};

        
    

class IDMEFV2node {
private:

        IDMEFV2location * location;

        std::list<IDMEFV2node_name *> node_name;

        std::list<IDMEFV2interface *> interface;
    protected:
        idmefv2_node_t *_priv;
        idmefv2_node_t *_priv;

    public:

    
        IDMEFV2node();
        IDMEFV2node(idmefv2_node_t *ptr);
        IDMEFV2node *copy(IDMEFV2node *dst);
        IDMEFV2node *clone();
        int compare(IDMEFV2node *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        std::string *get_ident();
        void set_ident(std::string *ident);
        std::string *new_ident();





        idmefv2_location_t *get_location();
        void set_location(idmefv2_location_t *location);
        idmefv2_location_t *new_location();





        std::list<IDMEFV2node_name *> *get_node_name_list();
        void set_node_name(IDMEFV2node_name *object, int pos);
        IDMEFV2node_name *new_node_name(int pos);




        std::list<IDMEFV2interface *> *get_interface_list();
        void set_interface(IDMEFV2interface *object, int pos);
        IDMEFV2interface *new_interface(int pos);


};

        
    

class IDMEFV2user {
private:

        std::list<IDMEFV2user_id *> user_id;
    protected:
        idmefv2_user_t *_priv;
        idmefv2_user_t *_priv;

    public:

    
        IDMEFV2user();
        IDMEFV2user(idmefv2_user_t *ptr);
        IDMEFV2user *copy(IDMEFV2user *dst);
        IDMEFV2user *clone();
        int compare(IDMEFV2user *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        std::string *get_ident();
        void set_ident(std::string *ident);
        std::string *new_ident();





        idmefv2_user_category_t get_category();
        void set_category(idmefv2_user_category_t category);
        idmefv2_user_category_t *new_category();





        std::list<IDMEFV2user_id *> *get_user_id_list();
        void set_user_id(IDMEFV2user_id *object, int pos);
        IDMEFV2user_id *new_user_id(int pos);


};

        
    

class IDMEFV2impact_type {
    protected:
        idmefv2_impact_type_t *_priv;
        idmefv2_impact_type_t *_priv;

    public:

    
        IDMEFV2impact_type();
        IDMEFV2impact_type(idmefv2_impact_type_t *ptr);
        IDMEFV2impact_type *copy(IDMEFV2impact_type *dst);
        IDMEFV2impact_type *clone();
        int compare(IDMEFV2impact_type *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        idmefv2_impact_type_origin_t get_origin();
        void set_origin(idmefv2_impact_type_origin_t origin);
        idmefv2_impact_type_origin_t *new_origin();





        std::string *get_meaning();
        void set_meaning(std::string *meaning);
        std::string *new_meaning();





        std::string *get_name();
        void set_name(std::string *name);
        std::string *new_name();





        std::string *get_url();
        void set_url(std::string *url);
        std::string *new_url();



};

        
    

class IDMEFV2source {
private:

        IDMEFV2node * node;

        IDMEFV2user * user;

        IDMEFV2process * process;

        IDMEFV2service * service;
    protected:
        idmefv2_source_t *_priv;
        idmefv2_source_t *_priv;

    public:

    
        IDMEFV2source();
        IDMEFV2source(idmefv2_source_t *ptr);
        IDMEFV2source *copy(IDMEFV2source *dst);
        IDMEFV2source *clone();
        int compare(IDMEFV2source *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        std::string *get_ident();
        void set_ident(std::string *ident);
        std::string *new_ident();





        idmefv2_source_spoofed_t get_spoofed();
        void set_spoofed(idmefv2_source_spoofed_t spoofed);
        idmefv2_source_spoofed_t *new_spoofed();





        idmefv2_node_t *get_node();
        void set_node(idmefv2_node_t *node);
        idmefv2_node_t *new_node();





        idmefv2_user_t *get_user();
        void set_user(idmefv2_user_t *user);
        idmefv2_user_t *new_user();





        idmefv2_process_t *get_process();
        void set_process(idmefv2_process_t *process);
        idmefv2_process_t *new_process();





        idmefv2_service_t *get_service();
        void set_service(idmefv2_service_t *service);
        idmefv2_service_t *new_service();



};

        
    

class IDMEFV2target {
private:

        IDMEFV2node * node;

        IDMEFV2user * user;

        IDMEFV2process * process;

        IDMEFV2service * service;

        IDMEFV2file * file;
    protected:
        idmefv2_target_t *_priv;
        idmefv2_target_t *_priv;

    public:

    
        IDMEFV2target();
        IDMEFV2target(idmefv2_target_t *ptr);
        IDMEFV2target *copy(IDMEFV2target *dst);
        IDMEFV2target *clone();
        int compare(IDMEFV2target *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        std::string *get_ident();
        void set_ident(std::string *ident);
        std::string *new_ident();





        idmefv2_target_decoy_t get_decoy();
        void set_decoy(idmefv2_target_decoy_t decoy);
        idmefv2_target_decoy_t *new_decoy();





        idmefv2_node_t *get_node();
        void set_node(idmefv2_node_t *node);
        idmefv2_node_t *new_node();





        idmefv2_user_t *get_user();
        void set_user(idmefv2_user_t *user);
        idmefv2_user_t *new_user();





        idmefv2_process_t *get_process();
        void set_process(idmefv2_process_t *process);
        idmefv2_process_t *new_process();





        idmefv2_service_t *get_service();
        void set_service(idmefv2_service_t *service);
        idmefv2_service_t *new_service();





        idmefv2_file_t *get_file();
        void set_file(idmefv2_file_t *file);
        idmefv2_file_t *new_file();



};

        
    

class IDMEFV2original_data {
private:

        IDMEFV2node * node;

        IDMEFV2file * file;
    protected:
        idmefv2_original_data_t *_priv;
        idmefv2_original_data_t *_priv;

    public:

    
        IDMEFV2original_data();
        IDMEFV2original_data(idmefv2_original_data_t *ptr);
        IDMEFV2original_data *copy(IDMEFV2original_data *dst);
        IDMEFV2original_data *clone();
        int compare(IDMEFV2original_data *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        IDMEFV2idmefv2_time *get_timestamp();
        void set_timestamp(IDMEFV2idmefv2_time *timestamp);
        IDMEFV2idmefv2_time *new_timestamp();





        std::string *get_name();
        void set_name(std::string *name);
        std::string *new_name();





        IDMEFV2idmefv2_data *get_data();
        void set_data(IDMEFV2idmefv2_data *data);
        IDMEFV2idmefv2_data *new_data();





        idmefv2_node_t *get_node();
        void set_node(idmefv2_node_t *node);
        idmefv2_node_t *new_node();





        idmefv2_file_t *get_file();
        void set_file(idmefv2_file_t *file);
        idmefv2_file_t *new_file();



};

        
    

class IDMEFV2observable {
    protected:
        idmefv2_observable_t *_priv;
        idmefv2_observable_t *_priv;

    public:

    
        IDMEFV2observable();
        IDMEFV2observable(idmefv2_observable_t *ptr);
        IDMEFV2observable *copy(IDMEFV2observable *dst);
        IDMEFV2observable *clone();
        int compare(IDMEFV2observable *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        idmefv2_observable_origin_t get_origin();
        void set_origin(idmefv2_observable_origin_t origin);
        idmefv2_observable_origin_t *new_origin();





        std::string *get_meaning();
        void set_meaning(std::string *meaning);
        std::string *new_meaning();





        std::string *get_url();
        void set_url(std::string *url);
        std::string *new_url();





        std::string *get_name();
        void set_name(std::string *name);
        std::string *new_name();



};

        
    

class IDMEFV2taken_action {
    protected:
        idmefv2_taken_action_t *_priv;
        idmefv2_taken_action_t *_priv;

    public:

    
        IDMEFV2taken_action();
        IDMEFV2taken_action(idmefv2_taken_action_t *ptr);
        IDMEFV2taken_action *copy(IDMEFV2taken_action *dst);
        IDMEFV2taken_action *clone();
        int compare(IDMEFV2taken_action *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        idmefv2_taken_action_category_t get_category();
        void set_category(idmefv2_taken_action_category_t category);
        idmefv2_taken_action_category_t *new_category();



};

        
    

class IDMEFV2reference {
    protected:
        idmefv2_reference_t *_priv;
        idmefv2_reference_t *_priv;

    public:

    
        IDMEFV2reference();
        IDMEFV2reference(idmefv2_reference_t *ptr);
        IDMEFV2reference *copy(IDMEFV2reference *dst);
        IDMEFV2reference *clone();
        int compare(IDMEFV2reference *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        idmefv2_reference_origin_t get_origin();
        void set_origin(idmefv2_reference_origin_t origin);
        idmefv2_reference_origin_t *new_origin();





        std::string *get_meaning();
        void set_meaning(std::string *meaning);
        std::string *new_meaning();





        std::string *get_author();
        void set_author(std::string *author);
        std::string *new_author();





        IDMEFV2idmefv2_time *get_publication_time();
        void set_publication_time(IDMEFV2idmefv2_time *publication_time);
        IDMEFV2idmefv2_time *new_publication_time();





        std::string *get_version();
        void set_version(std::string *version);
        std::string *new_version();





        std::string *get_name();
        void set_name(std::string *name);
        std::string *new_name();





        std::string *get_url();
        void set_url(std::string *url);
        std::string *new_url();



};

        
    

class IDMEFV2analyzer {
private:

        IDMEFV2node * node;

        IDMEFV2process * process;
    protected:
        idmefv2_analyzer_t *_priv;
        idmefv2_analyzer_t *_priv;

    public:

    
        IDMEFV2analyzer();
        IDMEFV2analyzer(idmefv2_analyzer_t *ptr);
        IDMEFV2analyzer *copy(IDMEFV2analyzer *dst);
        IDMEFV2analyzer *clone();
        int compare(IDMEFV2analyzer *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        std::string *get_analyzerid();
        void set_analyzerid(std::string *analyzerid);
        std::string *new_analyzerid();





        std::string *get_name();
        void set_name(std::string *name);
        std::string *new_name();





        std::string *get_manufacturer();
        void set_manufacturer(std::string *manufacturer);
        std::string *new_manufacturer();





        std::string *get_model();
        void set_model(std::string *model);
        std::string *new_model();





        std::string *get_version();
        void set_version(std::string *version);
        std::string *new_version();





        idmefv2_analyzer_class_t get_class();
        void set_class(idmefv2_analyzer_class_t class_str);
        idmefv2_analyzer_class_t *new_class();





        std::string *get_ostype();
        void set_ostype(std::string *ostype);
        std::string *new_ostype();





        std::string *get_osversion();
        void set_osversion(std::string *osversion);
        std::string *new_osversion();





        std::string *get_ext_class();
        void set_ext_class(std::string *ext_class);
        std::string *new_ext_class();





        idmefv2_analyzer_analyzeraction_t get_analyzeraction();
        void set_analyzeraction(idmefv2_analyzer_analyzeraction_t analyzeraction);
        idmefv2_analyzer_analyzeraction_t *new_analyzeraction();





        std::string *get_actionhistory();
        void set_actionhistory(std::string *actionhistory);
        std::string *new_actionhistory();





        idmefv2_node_t *get_node();
        void set_node(idmefv2_node_t *node);
        idmefv2_node_t *new_node();





        idmefv2_process_t *get_process();
        void set_process(idmefv2_process_t *process);
        idmefv2_process_t *new_process();





        IDMEFV2idmefv2_time *get_analyzer_time();
        void set_analyzer_time(IDMEFV2idmefv2_time *analyzer_time);
        IDMEFV2idmefv2_time *new_analyzer_time();



};

        
    

class IDMEFV2additional_data {
    protected:
        idmefv2_additional_data_t *_priv;
        idmefv2_additional_data_t *_priv;

    public:

    
        IDMEFV2additional_data();
        IDMEFV2additional_data(idmefv2_additional_data_t *ptr);
        IDMEFV2additional_data *copy(IDMEFV2additional_data *dst);
        IDMEFV2additional_data *clone();
        int compare(IDMEFV2additional_data *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        std::string *get_meaning();
        void set_meaning(std::string *meaning);
        std::string *new_meaning();





        idmefv2_additional_data_type_t get_type();
        void set_type(idmefv2_additional_data_type_t type);
        idmefv2_additional_data_type_t *new_type();





        IDMEFV2idmefv2_data *get_data();
        void set_data(IDMEFV2idmefv2_data *data);
        IDMEFV2idmefv2_data *new_data();



};

        
    

class IDMEFV2correlation_alert {
    protected:
        idmefv2_correlation_alert_t *_priv;
        idmefv2_correlation_alert_t *_priv;

    public:

    
        IDMEFV2correlation_alert();
        IDMEFV2correlation_alert(idmefv2_correlation_alert_t *ptr);
        IDMEFV2correlation_alert *copy(IDMEFV2correlation_alert *dst);
        IDMEFV2correlation_alert *clone();
        int compare(IDMEFV2correlation_alert *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        std::string *get_name();
        void set_name(std::string *name);
        std::string *new_name();





        std::list<std::string *> *get_alertident_list();
        void set_alertident(std::string *object, int pos);
        std::string *new_alertident(int pos);



        void unset_duration();

        uint32_t *get_duration();
        void set_duration(uint32_t duration);
        uint32_t *new_duration();




        void unset_counter();

        uint32_t *get_counter();
        void set_counter(uint32_t counter);
        uint32_t *new_counter();



};

        
    

class IDMEFV2analysis_data {
private:

        std::list<IDMEFV2observable *> observable;

        std::list<IDMEFV2original_data *> original_data;
    protected:
        idmefv2_analysis_data_t *_priv;
        idmefv2_analysis_data_t *_priv;

    public:

    
        IDMEFV2analysis_data();
        IDMEFV2analysis_data(idmefv2_analysis_data_t *ptr);
        IDMEFV2analysis_data *copy(IDMEFV2analysis_data *dst);
        IDMEFV2analysis_data *clone();
        int compare(IDMEFV2analysis_data *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        std::list<IDMEFV2observable *> *get_observable_list();
        void set_observable(IDMEFV2observable *object, int pos);
        IDMEFV2observable *new_observable(int pos);




        std::list<IDMEFV2original_data *> *get_original_data_list();
        void set_original_data(IDMEFV2original_data *object, int pos);
        IDMEFV2original_data *new_original_data(int pos);


};

        
    

class IDMEFV2confidence {
    protected:
        idmefv2_confidence_t *_priv;
        idmefv2_confidence_t *_priv;

    public:

    
        IDMEFV2confidence();
        IDMEFV2confidence(idmefv2_confidence_t *ptr);
        IDMEFV2confidence *copy(IDMEFV2confidence *dst);
        IDMEFV2confidence *clone();
        int compare(IDMEFV2confidence *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        idmefv2_confidence_rating_t get_rating();
        void set_rating(idmefv2_confidence_rating_t rating);
        idmefv2_confidence_rating_t *new_rating();



};

        
    

class IDMEFV2impact {
private:

        std::list<IDMEFV2impact_type *> impact_type;
    protected:
        idmefv2_impact_t *_priv;
        idmefv2_impact_t *_priv;

    public:

    
        IDMEFV2impact();
        IDMEFV2impact(idmefv2_impact_t *ptr);
        IDMEFV2impact *copy(IDMEFV2impact *dst);
        IDMEFV2impact *clone();
        int compare(IDMEFV2impact *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        idmefv2_impact_severity_t get_severity();
        void set_severity(idmefv2_impact_severity_t severity);
        idmefv2_impact_severity_t *new_severity();





        idmefv2_impact_completion_t get_completion();
        void set_completion(idmefv2_impact_completion_t completion);
        idmefv2_impact_completion_t *new_completion();





        idmefv2_impact_availability_t get_availability();
        void set_availability(idmefv2_impact_availability_t availability);
        idmefv2_impact_availability_t *new_availability();





        idmefv2_impact_integrity_t get_integrity();
        void set_integrity(idmefv2_impact_integrity_t integrity);
        idmefv2_impact_integrity_t *new_integrity();





        idmefv2_impact_confidentiality_t get_confidentiality();
        void set_confidentiality(idmefv2_impact_confidentiality_t confidentiality);
        idmefv2_impact_confidentiality_t *new_confidentiality();





        std::string *get_description();
        void set_description(std::string *description);
        std::string *new_description();





        std::list<IDMEFV2impact_type *> *get_impact_type_list();
        void set_impact_type(IDMEFV2impact_type *object, int pos);
        IDMEFV2impact_type *new_impact_type(int pos);


};

        
    

class IDMEFV2recommanded_action {
    protected:
        idmefv2_recommanded_action_t *_priv;
        idmefv2_recommanded_action_t *_priv;

    public:

    
        IDMEFV2recommanded_action();
        IDMEFV2recommanded_action(idmefv2_recommanded_action_t *ptr);
        IDMEFV2recommanded_action *copy(IDMEFV2recommanded_action *dst);
        IDMEFV2recommanded_action *clone();
        int compare(IDMEFV2recommanded_action *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        idmefv2_recommanded_action_action_t get_action();
        void set_action(idmefv2_recommanded_action_action_t action);
        idmefv2_recommanded_action_action_t *new_action();




        void unset_step();

        uint32_t *get_step();
        void set_step(uint32_t step);
        uint32_t *new_step();



};

        
    

class IDMEFV2assessment {
private:

        IDMEFV2impact * impact;

        std::list<IDMEFV2taken_action *> taken_action;

        IDMEFV2confidence * confidence;

        std::list<IDMEFV2recommanded_action *> recommanded_action;
    protected:
        idmefv2_assessment_t *_priv;
        idmefv2_assessment_t *_priv;

    public:

    
        IDMEFV2assessment();
        IDMEFV2assessment(idmefv2_assessment_t *ptr);
        IDMEFV2assessment *copy(IDMEFV2assessment *dst);
        IDMEFV2assessment *clone();
        int compare(IDMEFV2assessment *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        idmefv2_impact_t *get_impact();
        void set_impact(idmefv2_impact_t *impact);
        idmefv2_impact_t *new_impact();





        std::list<IDMEFV2taken_action *> *get_taken_action_list();
        void set_taken_action(IDMEFV2taken_action *object, int pos);
        IDMEFV2taken_action *new_taken_action(int pos);




        idmefv2_confidence_t *get_confidence();
        void set_confidence(idmefv2_confidence_t *confidence);
        idmefv2_confidence_t *new_confidence();





        std::list<IDMEFV2recommanded_action *> *get_recommanded_action_list();
        void set_recommanded_action(IDMEFV2recommanded_action *object, int pos);
        IDMEFV2recommanded_action *new_recommanded_action(int pos);


};

        
    

class IDMEFV2classification {
private:

        std::list<IDMEFV2reference *> reference;
    protected:
        idmefv2_classification_t *_priv;
        idmefv2_classification_t *_priv;

    public:

    
        IDMEFV2classification();
        IDMEFV2classification(idmefv2_classification_t *ptr);
        IDMEFV2classification *copy(IDMEFV2classification *dst);
        IDMEFV2classification *clone();
        int compare(IDMEFV2classification *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        std::string *get_ident();
        void set_ident(std::string *ident);
        std::string *new_ident();





        std::string *get_text();
        void set_text(std::string *text);
        std::string *new_text();





        std::list<IDMEFV2reference *> *get_reference_list();
        void set_reference(IDMEFV2reference *object, int pos);
        IDMEFV2reference *new_reference(int pos);


};

        
    

class IDMEFV2heartbeat {
private:

        IDMEFV2analyzer * analyzer;

        std::list<IDMEFV2additional_data *> additional_data;
    protected:
        idmefv2_heartbeat_t *_priv;
        idmefv2_heartbeat_t *_priv;

    public:

    
        IDMEFV2heartbeat();
        IDMEFV2heartbeat(idmefv2_heartbeat_t *ptr);
        IDMEFV2heartbeat *copy(IDMEFV2heartbeat *dst);
        IDMEFV2heartbeat *clone();
        int compare(IDMEFV2heartbeat *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        std::string *get_messageid();
        void set_messageid(std::string *messageid);
        std::string *new_messageid();





        idmefv2_analyzer_t *get_analyzer();
        void set_analyzer(idmefv2_analyzer_t *analyzer);
        idmefv2_analyzer_t *new_analyzer();





        IDMEFV2idmefv2_time *get_create_time();
        void set_create_time(IDMEFV2idmefv2_time *create_time);
        IDMEFV2idmefv2_time *new_create_time();




        void unset_heartbeat_interval();

        uint32_t *get_heartbeat_interval();
        void set_heartbeat_interval(uint32_t heartbeat_interval);
        uint32_t *new_heartbeat_interval();





        std::list<IDMEFV2additional_data *> *get_additional_data_list();
        void set_additional_data(IDMEFV2additional_data *object, int pos);
        IDMEFV2additional_data *new_additional_data(int pos);


};

        
    

class IDMEFV2alert {
private:

        std::list<IDMEFV2analyzer *> analyzer;

        IDMEFV2classification * classification;

        IDMEFV2analysis_data * analysis_data;

        std::list<IDMEFV2source *> source;

        std::list<IDMEFV2target *> target;

        IDMEFV2assessment * assessment;

        std::list<IDMEFV2additional_data *> additional_data;
        union {

                IDMEFV2correlation_alert * correlation_alert;
        } detail;
        idmefv2_alert_type_t type;
    protected:
        idmefv2_alert_t *_priv;
        idmefv2_alert_t *_priv;

    public:

    
        IDMEFV2alert();
        IDMEFV2alert(idmefv2_alert_t *ptr);
        IDMEFV2alert *copy(IDMEFV2alert *dst);
        IDMEFV2alert *clone();
        int compare(IDMEFV2alert *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        std::string *get_messageid();
        void set_messageid(std::string *messageid);
        std::string *new_messageid();





        std::string *get_analyzerhash();
        void set_analyzerhash(std::string *analyzerhash);
        std::string *new_analyzerhash();





        std::list<IDMEFV2analyzer *> *get_analyzer_list();
        void set_analyzer(IDMEFV2analyzer *object, int pos);
        IDMEFV2analyzer *new_analyzer(int pos);




        IDMEFV2idmefv2_time *get_create_time();
        void set_create_time(IDMEFV2idmefv2_time *create_time);
        IDMEFV2idmefv2_time *new_create_time();





        idmefv2_classification_t *get_classification();
        void set_classification(idmefv2_classification_t *classification);
        idmefv2_classification_t *new_classification();





        IDMEFV2idmefv2_time *get_detect_time();
        void set_detect_time(IDMEFV2idmefv2_time *detect_time);
        IDMEFV2idmefv2_time *new_detect_time();





        idmefv2_analysis_data_t *get_analysis_data();
        void set_analysis_data(idmefv2_analysis_data_t *analysis_data);
        idmefv2_analysis_data_t *new_analysis_data();





        std::list<IDMEFV2source *> *get_source_list();
        void set_source(IDMEFV2source *object, int pos);
        IDMEFV2source *new_source(int pos);




        std::list<IDMEFV2target *> *get_target_list();
        void set_target(IDMEFV2target *object, int pos);
        IDMEFV2target *new_target(int pos);




        idmefv2_assessment_t *get_assessment();
        void set_assessment(idmefv2_assessment_t *assessment);
        idmefv2_assessment_t *new_assessment();





        std::list<IDMEFV2additional_data *> *get_additional_data_list();
        void set_additional_data(IDMEFV2additional_data *object, int pos);
        IDMEFV2additional_data *new_additional_data(int pos);


        idmefv2_alert_type_t get_type();



        idmefv2_correlation_alert_t *get_correlation_alert();
        void set_correlation_alert(idmefv2_correlation_alert_t *correlation_alert);
        idmefv2_correlation_alert_t *new_correlation_alert();




};

        
    

class IDMEFV2message {
private:
        union {

                IDMEFV2alert * alert;

                IDMEFV2heartbeat * heartbeat;
        } message;
        idmefv2_message_type_t type;
    protected:
        idmefv2_message_t *_priv;
        idmefv2_message_t *_priv;

    public:

    
        IDMEFV2message();
        IDMEFV2message(idmefv2_message_t *ptr);
        IDMEFV2message *copy(IDMEFV2message *dst);
        IDMEFV2message *clone();
        int compare(IDMEFV2message *obj1);

    
        ~{IDMEFV2$struct.short_type_name}();\n");

    



        std::string *get_version();
        void set_version(std::string *version);
        std::string *new_version();



        idmefv2_message_type_t get_type();



        idmefv2_alert_t *get_alert();
        void set_alert(idmefv2_alert_t *alert);
        idmefv2_alert_t *new_alert();





        idmefv2_heartbeat_t *get_heartbeat();
        void set_heartbeat(idmefv2_heartbeat_t *heartbeat);
        idmefv2_heartbeat_t *new_heartbeat();




};


#define IDMEFV2_CLASS_ID_ADDRESS_TRANSLATION 4
#define IDMEFV2_CLASS_ID_ADDRESS_CATEGORY 3
#define IDMEFV2_CLASS_ID_ADDRESS 5
#define IDMEFV2_CLASS_ID_USER_ID_CATEGORY 6
#define IDMEFV2_CLASS_ID_USER_ID 7
#define IDMEFV2_CLASS_ID_NODE_NAME_CATEGORY 8
#define IDMEFV2_CLASS_ID_NODE_NAME 9
#define IDMEFV2_CLASS_ID_LOCATION 10
#define IDMEFV2_CLASS_ID_INTERFACE_CATEGORY 11
#define IDMEFV2_CLASS_ID_INTERFACE 12
#define IDMEFV2_CLASS_ID_FILE_ACCESS_PERMISSION 13
#define IDMEFV2_CLASS_ID_FILE_ACCESS 14
#define IDMEFV2_CLASS_ID_INODE 15
#define IDMEFV2_CLASS_ID_CHECKSUM_ALGORITHM 16
#define IDMEFV2_CLASS_ID_CHECKSUM 17
#define IDMEFV2_CLASS_ID_STREAM_OFFSETUNIT 18
#define IDMEFV2_CLASS_ID_STREAM 19
#define IDMEFV2_CLASS_ID_FILE_CATEGORY 20
#define IDMEFV2_CLASS_ID_FILE 21
#define IDMEFV2_CLASS_ID_LINKAGE_CATEGORY 22
#define IDMEFV2_CLASS_ID_LINKAGE 23
#define IDMEFV2_CLASS_ID_CONTAINER 24
#define IDMEFV2_CLASS_ID_PROCESS 25
#define IDMEFV2_CLASS_ID_SERVICE 26
#define IDMEFV2_CLASS_ID_NODE 27
#define IDMEFV2_CLASS_ID_USER_CATEGORY 28
#define IDMEFV2_CLASS_ID_USER 29
#define IDMEFV2_CLASS_ID_IMPACT_TYPE_ORIGIN 30
#define IDMEFV2_CLASS_ID_IMPACT_TYPE 31
#define IDMEFV2_CLASS_ID_SOURCE_SPOOFED 32
#define IDMEFV2_CLASS_ID_SOURCE 33
#define IDMEFV2_CLASS_ID_TARGET_DECOY 34
#define IDMEFV2_CLASS_ID_TARGET 35
#define IDMEFV2_CLASS_ID_ORIGINAL_DATA 36
#define IDMEFV2_CLASS_ID_OBSERVABLE_ORIGIN 37
#define IDMEFV2_CLASS_ID_OBSERVABLE 38
#define IDMEFV2_CLASS_ID_TAKEN_ACTION_CATEGORY 39
#define IDMEFV2_CLASS_ID_TAKEN_ACTION 40
#define IDMEFV2_CLASS_ID_REFERENCE_ORIGIN 41
#define IDMEFV2_CLASS_ID_REFERENCE 42
#define IDMEFV2_CLASS_ID_ANALYZER_CLASS 66
#define IDMEFV2_CLASS_ID_ANALYZER_ANALYZERACTION 67
#define IDMEFV2_CLASS_ID_ANALYZER 43
#define IDMEFV2_CLASS_ID_ADDITIONAL_DATA_TYPE 44
#define IDMEFV2_CLASS_ID_ADDITIONAL_DATA 45
#define IDMEFV2_CLASS_ID_CORRELATION_ALERT 46
#define IDMEFV2_CLASS_ID_ANALYSIS_DATA 47
#define IDMEFV2_CLASS_ID_CONFIDENCE_RATING 48
#define IDMEFV2_CLASS_ID_CONFIDENCE 49
#define IDMEFV2_CLASS_ID_IMPACT_SEVERITY 51
#define IDMEFV2_CLASS_ID_IMPACT_COMPLETION 50
#define IDMEFV2_CLASS_ID_IMPACT_AVAILABILITY 52
#define IDMEFV2_CLASS_ID_IMPACT_INTEGRITY 53
#define IDMEFV2_CLASS_ID_IMPACT_CONFIDENTIALITY 54
#define IDMEFV2_CLASS_ID_IMPACT 55
#define IDMEFV2_CLASS_ID_RECOMMANDED_ACTION_ACTION 68
#define IDMEFV2_CLASS_ID_RECOMMANDED_ACTION 56
#define IDMEFV2_CLASS_ID_ASSESSMENT 57
#define IDMEFV2_CLASS_ID_CLASSIFICATION 58
#define IDMEFV2_CLASS_ID_HEARTBEAT 59
#define IDMEFV2_CLASS_ID_ALERT_TYPE 62
#define IDMEFV2_CLASS_ID_ALERT 63
#define IDMEFV2_CLASS_ID_MESSAGE_TYPE 64
#define IDMEFV2_CLASS_ID_MESSAGE 65
#endif /*_LIBIDMEFV2_IDMEFV2_TREE_WRAP */


